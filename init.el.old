
;;----------------------------------------------------------------
;; #Home Directory
;;
(cd "~/")


;;----------------------------------------------------------------
;; #path
;;
(let ((default-directory (expand-file-name "~/.emacs.d/elisp")))
 (add-to-list 'load-path default-directory)
 (if (fboundp 'normal-top-level-add-subdirs-to-load-path)
     (normal-top-level-add-subdirs-to-load-path)))

(add-to-list 'load-path "/usr/local/Cellar/pdf-tools/0.20/elpa")


;;----------------------------------------------------------------
;; #face
;;
(custom-set-faces
 '(default ((t
             (:background "gray15" :foreground "#55FF55")
             ))))
 '(cursor ((((class color)
             (background dark))
            (:background "#00AA00"))
           (((class color)
             (background light))
            (:background "#999999"))
           (t ())
           ))


;;----------------------------------------------------------------
;; #cask & pallet
;;
(require 'cask "/usr/local/opt/cask/cask.el")
(cask-initialize)
(require 'pallet)



;;----------------------------------------------------------------
;; #package.el
;;
(require 'package)
(add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/"))
;; インストールしたパッケージにロードパスを通してロードする
(package-initialize)
;; exec-path-from-shel
(exec-path-from-shell-initialize)



;;----------------------------------------------------------------
;;  #global key customize
;;
(global-set-key (kbd "M-n") 'next-error)
(global-set-key (kbd "M-p") 'previous-error)
(global-set-key (kbd "M-g M-g") 'goto-line)
(global-unset-key "\M-c") ;;captalize word


;;----------------------------------------------------------------
;; #misc
;;
;; バックアップファイルの置き場所を指定する
;(setq make-backup-files t)
;(setq backup-directory-alist
;      (cons (cons "\\.*$" (expand-file-name "~/bak"))
;            backup-directory-alist))

;;; 右から左に読む言語に対応させないことで描画高速化
(setq-default bidi-display-reordering nil)

;;; splash screenを無効にする
(setq inhibit-splash-screen t)

;;; 同じ内容を履歴に記録しないようにする
(setq history-delete-duplicates t)

;; C-u C-SPC C-SPC ...でどんどん過去のマークを遡る
(setq set-mark-command-repeat-pop t)

;; C-kで行全体を削除
(setq kill-whole-line t)

;; マウスで選択するとコピーする Emacs 24 ではデフォルトが nil
(setq mouse-drag-copy-region t)

;; 日本語の設定
(set-language-environment 'Japanese)
(prefer-coding-system 'utf-8)
;(setq default-input-method "MacOSX")

;; クリップボードの文字コード
(set-selection-coding-system 'utf-8)

;; 端末の文字コード
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)

;; ファイル名の文字コード
(require 'ucs-normalize)
(set-file-name-coding-system 'utf-8-hfs)

;; フォントの設定
(let ((system-name (system-name)))
  (cond
;   ;; systemA または systemB で実行中の場合
;   ((string-match "^\\(systemA\\|systemB\\)\\(\\..+\\)*$" system-name)
;    (load "~/.emacs-AorB"))
;   ;; systemC で実行中の場合
;   ((string-match "^systemC\\(\\..+\\)*$" system-name)
;    (load "~/.emacs-C"))
   ;; 指定されていないマシンで実行中の場合
;   (t
;    (message (concat "Unknown Host: " system-name)))))

   ;; tauon で実行中の場合
   ((string-match "^tauon\\(\\..+\\)*$" system-name)
     (create-fontset-from-ascii-font "Menlo-18:weight=normal:slant=normal" nil "menlokakugo")
     (set-fontset-font "fontset-menlokakugo" 'unicode (font-spec :family "Hiragino Kaku Gothic ProN" ) nil 'append)
     (add-to-list 'default-frame-alist '(font . "fontset-menlokakugo"))
     (setq face-font-rescale-alist '((".*Hiragino.*" . 1.2) (".*Menlo.*" . 1.0)))

     ;; Ricty フォントの利用
     (create-fontset-from-ascii-font "Ricty-18:weight=normal:slant=normal" nil "ricty")
     (set-fontset-font "fontset-ricty"
		       'unicode
		       (font-spec :family "Ricty" :size 18)
		       nil
		       'append)
     (add-to-list 'default-frame-alist '(font . "fontset-ricty"))

     ;; フレーム位置設定(ウィンドウ） 
     (setq default-frame-alist
	   (append
	    '((top . 22)    ; フレームの Y 位置(ピクセル数)
	      (left . 0)    ; フレームの X 位置(ピクセル数)
	      (width . 116)    ; フレーム幅(文字数)
	      (height . 81)   ; フレーム高(文字数)
	      ) default-frame-alist))
     (setq initial-frame-alist
	   (append
	    '((top . 22)    ; フレームの Y 位置(ピクセル数)
	      (left . 0)    ; フレームの X 位置(ピクセル数)
	      (width . 116)    ; フレーム幅(文字数)
	      (height . 81)   ; フレーム高(文字数)
	      ) initial-frame-alist)))

     ;; (setq default-frame-alist
     ;; 	   (append
     ;; 	    '((top . 22)    ; フレームの Y 位置(ピクセル数)
     ;; 	      (left . 0)    ; フレームの X 位置(ピクセル数)
     ;; 	      (width . 100)    ; フレーム幅(文字数)
     ;; 	      (height . 70)   ; フレーム高(文字数)
     ;; 	      ) default-frame-alist))
     ;; (setq initial-frame-alist
     ;; 	   (append
     ;; 	    '((top . 22)    ; フレームの Y 位置(ピクセル数)
     ;; 	      (left . 0)    ; フレームの X 位置(ピクセル数)
     ;; 	      (width . 100)    ; フレーム幅(文字数)
     ;; 	      (height . 70)   ; フレーム高(文字数)
     ;; 	      ) initial-frame-alist)))

   ;; muon で実行中の場合
   ((string-match "^muon\\(\\..+\\)*$" system-name)
    (create-fontset-from-ascii-font "Menlo-14:weight=normal:slant=normal" nil "menlokakugo")
    (set-fontset-font "fontset-menlokakugo" 'unicode (font-spec :family "Hiragino Kaku Gothic ProN" ) nil 'append)
    (add-to-list 'default-frame-alist '(font . "fontset-menlokakugo"))
    (setq face-font-rescale-alist '((".*Hiragino.*" . 1.2) (".*Menlo.*" . 1.0)))
    ;; フレーム位置設定(ウィンドウ） 
(setq default-frame-alist
      (append
       '((top . 22)    ; フレームの Y 位置(ピクセル数)
	 (left . 0)    ; フレームの X 位置(ピクセル数)
	 (width . 82)    ; フレーム幅(文字数)
	 (height . 42)   ; フレーム高(文字数)
	 ) default-frame-alist))
(setq initial-frame-alist
      (append
       '((top . 22)    ; フレームの Y 位置(ピクセル数)
	 (left . 0)    ; フレームの X 位置(ピクセル数)
	 (width . 82)    ; フレーム幅(文字数)
	 (height . 42)   ; フレーム高(文字数)
	 ) initial-frame-alist)))

;; 指定されていないマシンで実行中の場合
   (t
    (create-fontset-from-ascii-font "Menlo-14:weight=normal:slant=normal" nil "menlokakugo")
     (set-fontset-font "fontset-menlokakugo" 'unicode (font-spec :family "Hiragino Kaku Gothic ProN" ) nil 'append)
     (add-to-list 'default-frame-alist '(font . "fontset-menlokakugo"))
     (setq face-font-rescale-alist '((".*Hiragino.*" . 1.2) (".*Menlo.*" . 1.0))))))
    
;; 対応するカッコをハイライト
(show-paren-mode 1)

;; スクロールバーを非表示に
(set-scroll-bar-mode nil)

;; フルスクリーン
(defun my-toggle-fullscreen ()
  "Toggle fullscreen."
  (interactive)
  (if (eq (frame-parameter nil 'fullscreen) 'fullboth)
      (progn
        (set-frame-parameter nil 'fullscreen nil)
        (display-time-mode 0))
    (set-frame-parameter nil 'fullscreen 'fullboth)
    (display-time-mode 1)))
(global-set-key (kbd "C-M-x") 'my-toggle-fullscreen)

;; フレームの最大化
(require 'maxframe)
(defvar my-fullscreen-p t "Check if fullscreen is on or off")
(defun my-toggle-fullscreen ()
(interactive)
(setq my-fullscreen-p (not my-fullscreen-p))
(if my-fullscreen-p
(restore-frame)
(maximize-frame)))
(global-set-key (kbd "C-M-z") 'my-toggle-fullscreen)

;; Dired の x や D でゴミ箱に捨てる。Finder での「取り消し」「戻す」は不可。
(when (fboundp 'system-move-file-to-trash)
  (defadvice dired-do-flagged-delete
    (around move-to-trash activate)
    "Use `system-move-file-to-trash'."
    (let ((delete-by-moving-to-trash 'system-move-file-to-trash))
      ad-do-it))

  (defadvice dired-do-delete
    (around move-to-trash activate)
    "Use `system-move-file-to-trash'."
    (let ((delete-by-moving-to-trash 'system-move-file-to-trash))
      ad-do-it)))

;; メニューバー
(global-set-key "\M-`" 'menu-bar-open) ; tmm-menubar

;; Control-h
(global-set-key "\C-h" 'delete-backward-char)

;; otickther-window
(global-set-key [?\C-.] 'other-window)

;; command キーを meta キーに
(setq ns-command-modifier (quote meta))
(setq ns-left-alternate-modifier (quote super))
(setq ns-right-command-modifier (quote hyper))

;; 行番号の表示(mode line)
(line-number-mode t)

;; 行番号の表示(left side)
(global-set-key [f9] 'global-linum-mode)
(setq linum-format "%3d ")

;; 列番号の表示
(column-number-mode t)

;; カーソル点滅表示
(blink-cursor-mode 0)

;; スクロール時のカーソル位置の維持
(setq scroll-preserve-screen-position t)

;; スクロール行数（一行ごとのスクロール）
(setq vertical-centering-font-regexp ".*")
(setq scroll-conservatively 35)
(setq scroll-margin 0)
(setq scroll-step 1)

;; 画面スクロール時の重複行数
(setq next-screen-context-lines 1)

;; 起動メッセージの非表示
(setq inhibit-startup-message t)

;; ツールバーを非表示
(tool-bar-mode -1)

;;ブックマークを変更したら即保存する
(setq bookmark-save-flag 1)

;;最近使ったブックマークを上に持ってきてくれる
(progn
  (setq bookmark-sort-flag nil)
  (defun bookmark-arrange-latest-top ()
    (let ((latest (bookmark-get-bookmark bookmark)))
      (setq bookmark-alist (cons latest (delq latest bookmark-alist))))
    (bookmark-save))
  (add-hook 'bookmark-after-jump-hook 'bookmark-arrange-latest-top))

;; バッファの同一ファイル名を区別する
(require 'uniquify)
(setq uniquify-buffer-name-style 'post-forward-angle-brackets)
(setq uniquify-ignore-buffers-re "*[^*]+*")

;; 以前開いたファイルを再度開いたとき、元のカーソル位置を復元する
;; http://www.emacswiki.org/emacs/SavePlace
(when (require 'saveplace nil t)
  (setq-default save-place t)
  (setq save-place-file "~/.emacs.d/saved-places"))

;;; インデントにTABを使わないようにする
(setq-default indent-tabs-mode nil)

;; ミニバッファ履歴を次回Emacs起動時にも保存する
(savehist-mode 1)

;;; GCを減らして軽くする
;(setq gc-cons-threshold (* 10 gc-cons-threshold))

;;; ログの記録行数を増やす
(setq message-log-max 10000)

;;; 履歴をたくさん保存する
(setq history-length 1000)

;; Window 分割を画面サイズに従って計算する
;; http://blog.shibayu36.org/entry/2012/12/18/161455
(defun split-window-vertically-n (num_wins)
  (interactive "p")
  (if (= num_wins 2)
      (split-window-vertically)
    (progn
      (split-window-vertically
       (- (window-height) (/ (window-height) num_wins)))
      (split-window-vertically-n (- num_wins 1)))))
(defun split-window-horizontally-n (num_wins)
  (interactive "p")
  (if (= num_wins 2)
      (split-window-horizontally)
    (progn
      (split-window-horizontally
       (- (window-width) (/ (window-width) num_wins)))
      (split-window-horizontally-n (- num_wins 1)))))

;; Window 分割・移動を C-t で
(defun other-window-or-split ()
  (interactive)
  (when (one-window-p)
    (if (>= (window-body-width) 270)
        (split-window-horizontally-n 3)
      (split-window-horizontally)))
  (other-window 1))
(global-set-key (kbd "C-t") 'other-window-or-split)

;; バッファ自動再読み込み
(global-auto-revert-mode 1)

;; 現在行のハイライト
(defface hlline-face
  '((((class color)
      (background dark))
     (:background "dark slate gray"))
    (((class color)
      (background light))
     (:background  "#98FB98"))
    (t
     ()))
  "*Face used by hl-line.")
(setq hl-line-face 'hlline-face)
(global-hl-line-mode)


;; ucs-normalize-NFC-region で濁点分離を直す
;; M-x ucs-normalize-NFC-buffer または "C-x RET u" で、
;; バッファ全体の濁点分離を直します。
;; 参考：
;; http://d.hatena.ne.jp/nakamura001/20120529/1338305696 
;; http://www.sakito.com/2010/05/mac-os-x-normalization.html
(require 'ucs-normalize)
(prefer-coding-system 'utf-8-hfs)
(setq file-name-coding-system 'utf-8-hfs)
(setq locale-coding-system 'utf-8-hfs)

(defun ucs-normalize-NFC-buffer ()
  (interactive)
  (ucs-normalize-NFC-region (point-min) (point-max))
  )

(global-set-key (kbd "C-x RET u") 'ucs-normalize-NFC-buffer)

;; バッファ全体のコンマとピリオドを全角に変換
;; http://d.hatena.ne.jp/mhrs/20061124/p1
(defun my-replace-comma-period (start end)
  "リージョンの「hoge」と「fuga」を「ほげ」と「ふが」に置換する"
  (interactive "r")
  (save-excursion
    (save-restriction
      (narrow-to-region start end)
      (goto-char (point-min))
      (while (re-search-forward "," nil t)
        (replace-match "，"))
      (goto-char (point-min))
      (while (re-search-forward "\\." nil t)
        (replace-match "．")))))

(global-set-key (kbd "C-x RET j") 'my-replace-comma-period)



;; -------------------------------------------------------------------------
;; @ whitespace
;; 全角スペースを強調。赤くなる。
;; http://bokuweb.hatenablog.com/entry/emcas-nyumon

;; (global-whitespace-mode 1)
;; (setq whitespace-space-regexp "\\(\u3000\\)")
;; (setq whitespace-style '(face tabs tab-mark spaces space-mark))
;; (setq whitespace-display-mappings ())
;; (set-face-foreground 'whitespace-tab "#F1C40F")
;; (set-face-background 'whitespace-space "#E74C3C")




;;----------------------------------------------------------------
;; #backup
;;
;; 変更ファイルのバックアップ
;   (setq make-backup-files nil)

;; 変更ファイルの番号つきバックアップ
;   (setq version-control nil)

;; 編集中ファイルのバックアップ
;   (setq auto-save-list-file-name nil)
;   (setq auto-save-list-file-prefix nil)

;; 編集中ファイルのバックアップ先
;   (setq auto-save-file-name-transforms
;         `((".*" ,temporary-file-directory t)))

;; 編集中ファイルのバックアップ間隔（秒）
;   (setq auto-save-timeout 30)

   ;; 編集中ファイルのバックアップ間隔（打鍵）
;   (setq auto-save-interval 500)

   ;; バックアップ世代数
;   (setq kept-old-versions 1)
;   (setq kept-new-versions 2)

   ;; 上書き時の警告表示
   ;- (setq trim-versions-without-asking nil)

   ;; 古いバックアップファイルの削除
;   (setq delete-old-versions t)


;;----------------------------------------------------------------
;; #tabbar
;;
;; (require 'cl)
;; (require 'tabbar)
;; (tabbar-mode 1)

;; ;; グループ化しない
;; (setq tabbar-buffer-groups-function nil)

;; ; 左に表示されるボタンを無効化
;; (dolist (btn '(tabbar-buffer-home-button
;;                tabbar-scroll-left-button
;;                tabbar-scroll-right-button))
;;   (set btn (cons (cons "" nil)
;;                  (cons "" nil))))

;; ;; タブに表示させるバッファの設定
;; (defvar my-tabbar-displayed-buffers
;; ;;  '("*scratch*" "*Messages*" "*Backtrace*" "*Colors*" "*Faces*" "*vc-")
;;   '("*Backtrace*" "*Colors*" "*Faces*" "*vc-")
;;   "*Regexps matches buffer names always included tabs.")
;;  
;; (defun my-tabbar-buffer-list ()
;;   "Return the list of buffers to show in tabs.
;; Exclude buffers whose name starts with a space or an asterisk.
;; The current buffer and buffers matches `my-tabbar-displayed-buffers'
;; are always included."
;;   (let* ((hides (list ?\  ?\*))
;;          (re (regexp-opt my-tabbar-displayed-buffers))
;;          (cur-buf (current-buffer))
;;          (tabs (delq nil
;;                      (mapcar (lambda (buf)
;;                                (let ((name (buffer-name buf)))
;;                                  (when (or (string-match re name)
;;                                            (not (memq (aref name 0) hides)))
;;                                    buf)))
;;                              (buffer-list)))))
;;     ;; Always include the current buffer.
;;     (if (memq cur-buf tabs)
;;         tabs
;;       (cons cur-buf tabs))))

;; ;; (defun my-tabbar-buffer-list ()
;; ;; (remove-if
;; ;; (lambda (buffer)
;; ;; (find (aref (buffer-name buffer) 0) " *"))
;; ;; (buffer-list)))
;;  
;; (setq tabbar-buffer-list-function 'my-tabbar-buffer-list)

;; ;; appearances
;; (setq tabbar-separator '(1.0)) ;; タブセパレータの長さ
;; (set-face-attribute 'tabbar-default nil
;;                     :family "Ricty"
;;                     :foreground "#c4c1b0"
;;                     :background "#c4c1b0"
;;                     :height 1.0)
;; (set-face-attribute 'tabbar-unselected nil
;;                     :foreground "#002c37"
;;                     :background "#c4c1b0"
;;                     :box nil)
;; (set-face-attribute 'tabbar-selected nil
;;                     :foreground "#e4007e"
;;                     :background "#ffffff"
;;                     :box nil)
;; (set-face-attribute 'tabbar-button nil
;;                     :box nil)
;; (set-face-attribute 'tabbar-separator nil
;; 		    :foreground "#c4c1b0"
;; ;;		    :background "#c4c1b0"
;; 		    :background "#e4e1b0"
;; 		    :height 1.0)

;; (global-set-key [(C-tab)]   'tabbar-forward-tab)
;; (global-set-key [(C-S-tab)] 'tabbar-backward-tab)
;; (global-set-key "\M-]"      'tabbar-forward-tab)
;; (global-set-key "\M-["      'tabbar-backward-tab)


;;----------------------------------------------------------------
;; #path
;;
;; より下に記述した物が PATH の先頭に追加されます
(dolist (dir (list
              "/sbin"
              "/usr/sbin"
              "/bin"
              "/usr/bin"
              "/opt/local/bin"
              "/usr/local/bin"
              (expand-file-name "~/bin")
              (expand-file-name "~/.emacs.d/bin")
              ))
 ;; PATH と exec-path に同じ物を追加します
  (when (and (file-exists-p dir) (not (member dir exec-path)))
    (setenv "PATH" (concat dir ":" (getenv "PATH")))
    (setq exec-path (append (list dir) exec-path))))

(setenv "MANPATH" (concat "/usr/local/man:/usr/share/man:/Developer/usr/share/man:/sw/share/man" (getenv "MANPATH")))


;;----------------------------------------------------------------
;; #shell
;;
;; shell の存在を確認
(defun skt:shell ()
  (or (executable-find "zsh")
      (executable-find "bash")
      (executable-find "cmdproxy")
      (error "can't find 'shell' command in PATH!!")))

;; Shell 名の設定
(setq shell-file-name (skt:shell))
(setenv "SHELL" shell-file-name)
(setq explicit-shell-file-name shell-file-name)


;;----------------------------------------------------------------
;; #YaTeX
;;

(autoload 'yatex-mode "yatex" "Yet Another LaTeX mode" t)
(setq auto-mode-alist
      (append
       '(
         ("\\.tex$" . yatex-mode)
         ("\\.ltx$" . yatex-mode)
         ("\\.cls$" . yatex-mode)
         ("\\.sty$" . yatex-mode)
         ("\\.clo$" . yatex-mode)
         ("\\.bbl$" . yatex-mode)
         ("\\.mdf$" . yatex-mode)
         ) auto-mode-alist))
;(setq YaTeX-inhibit-prefix-letter t)
(setq YaTeX-kanji-code nil)
;(setq tex-command "/usr/texbin/platex -synctex=1")
(setq bibtex-command "pbibtex")
(setq makeindex-command "mendex")
;(setq dvi2-command "/usr/texbin/xdvi")
;(setq dvi2-command "/usr/local/Cellar/skim/HEAD/Skim.app/Contents/MacOS/Skim")
(setq dvi2-command "~/bin/dviskim.sh")
;(setq dvi2-command "open -a Skim")
;(setq tex-command "~/Library/TeXShop/bin/platex2pdf-euc"
;      dvi2-command "open -a TeXShop")
(setq dviprint-command-format "dvipdfmx %s")
(setq YaTeX-inhibit-prefix-letter t)

;; (add-hook 'yatex-mode-hook
;;           '(lambda () (define-key YaTeX-mode-map (kbd "'") 'YaTeX-math-insert-sequence)))

;; AMS-LaTeX を使って数式を書くとき，何も設定しないと YaTeX は数式環境だと 認識してくれません。ということは，例えば align 環境の中で ";" を押しても 数式補完モードにはなってくれません。これではせっかくの AMS-LaTeX も YaTeX も台無しなので
;;(setq YaTeX-use-AMS-LaTeX t)

;; 「"」のキーで `` や '' を出さない
;; YaTeX Mode に入ってから、M-x local-unset-key RET " RET または
(add-hook 'yatex-mode-hook
          '(lambda ()
             (local-unset-key "\"")
             ;; 代わりにF5 に振り付ける
             (define-key YaTeX-mode-map [f5] 'YaTeX-insert-quote)
             ;; auto-fill-mode をオフにする（改行時のエラーに対処）
             (auto-fill-mode -1)
             ))

(setq YaTeX-math-key-list
      '(("'" . YaTeX-math-sign-alist)
        (":" . YaTeX-greek-key-alist)
        ))

;; 以下うまく機能せず
;; (setq YaTeX-math-key-list-private
;;       '(("\"" . YaTeX-math-funcs-list)
;; 	))
;; (setq YaTeX-math-funcs-list
;;       '(("s"	"sin"           "sin")
;; 	("c"    "cos"           "cos") 
;; 	("t"    "tan"           "tan")
;; 	("hs"	"sinh"          "sinh")
;; 	("hc"   "cosh"          "cosh")
;; 	("ht"   "tanh"          "tanh")
;; 	("S"	"arcsin"        "arcsin")
;; 	("C"    "arccos"        "arccos")
;; 	("T"    "arctan"        "arctan")
;; 	("se"   "sec"           "sec")
;; 	("cs"   "csc"           "csc")
;; 	("cot"  "cot"           "cot")
;; 	("l"    "ln"            "ln")
;; 	("L"    "log"           "log")
;; 	("e"    "exp"           "exp")
;; 	("M"    "max"           "max")
;; 	("m"    "min"           "min")
;; 	("su"   "sup"           "sup")
;; 	("in"   "inf"           "inf")
;; 	("di"   "dim"           "dim")
;; 	("de"   "det"           "det")
;; 	("i"    "imath"         "i")
;; 	("j"    "jmath"         "j")
;; 	("I"    "Im"            "Im")
;; 	("R"    "Re"            "Re")
;; 	))

;; math-sign の追加
(setq
 YaTeX-math-sign-alist-private
 '(
   ("q"         "quad"          "__")
   ("qq"        "qquad"        "____")
   ("t"		"text"		"text")
   ("ls"        "varlimsup"     "___\nlim")
   ("li"        "varliminf"     "lim\n---")
   ("il"        "varinjlim"     "lim\n-->")
   ("pl"        "varprojlim"    "lim\n<--")
   ("st"        "text{ s.t. }" "s.t.")
   ("bigop"     "bigoplus"      "_\n(+)~")
   ("bigot"     "bigotimes"     "_\n(x)\n ~")
   ))
;; プレビュー時、拡張子の補完をやめる
(setq YaTeX-dvi2-command-ext-alist nil)

;; latexmk
;(setq tex-command "latexmk -pv -pdf")
(setq tex-command "latexmk -pvc")


;;----------------------------------------------------------------
;; mdf
;;

;; (defun mdf-test ()
;;   (interactive)
;;   (save-buffer)
;;   (shell-command (concat "mdftest " (buffer-file-name)))
;;   )

;; (add-hook 
;;   'yatex-mode-hook
;;   '(lambda() 
;;      (require 'yatexprc)
;;      (local-set-key (kbd "C-'") 'mdf-test)))

(defun shell-command-sequence (cmd &rest others)
  (mapc 'shell-command `(,cmd ,@others)))

(defun mdf-typeset-and-preview ()
  (interactive)
  (let* ((f (buffer-file-name))
         (dir (file-name-directory f))
         (stem (file-name-sans-extension f)))
    (save-excursion
      (basic-save-buffer)
      (shell-command-sequence (concat "cd " dir)
                              (concat "mdftest " f)
;                              (concat "dvipdfmx " stem ".dvi")
;                              (concat "rm " stem ".dvi")
;                              (concat "rm " stem ".aux") ;; ここはコメントアウトすべきかも
;                              (concat "rm " stem ".log")
			      )
;      (pop-to-buffer (find-file-noselect (concat stem ".pdf")))
      )))


;; (defun mdf-typeset-and-preview-region (beg end)
;;   (interactive "r")
;;   (let* ((f (file-name-nondirectory (buffer-file-name)))
;;          (tmpfile (concat "/tmp/" f))
;;          (stem (file-name-sans-extension tmpfile))
;;          (contents (buffer-substring-no-properties beg end))
;;          header)
;;     (save-excursion
;;       (goto-char (point-min))
;;       (re-search-forward "\\\\begin{document}")
;;       (setq header (buffer-substring-no-properties (point-min) (1+ (match-end 0))))
;;       (set-buffer (find-file-noselect tmpfile))
;;       (insert header)
;;       (insert contents)
;;       (insert "\\end{document}")
;;       (unwind-protect
;;           (yatex-typeset-and-preview)
;;         (shell-command (concat "rm " tmpfile))
;;         (kill-buffer (current-buffer))))))

;; カーソル行でmdfがincludeされているときに実行するとそのmdfファイルを開く
(require 'mb-find-mdffile-at-cursor)

(add-hook 'yatex-mode-hook
          (lambda ()
            (local-set-key (kbd "C-c C-c") 'mdf-typeset-and-preview)
            (local-set-key (kbd "M-SPC") "$")
            (local-set-key (kbd "C-c C-f") 'mb-find-mdffile-at-cursor)
;            (local-set-key (kbd "C-c C-r") 'mdf-typeset-and-preview-region)
	    ))

;; (defvar mdf-mode-map nil)

;; (if mdf-mode-map
;;     ()
;;   (setq mdf-mode-map (make-sparse-keymap))
;;   (define-key mdf-mode-map (kbd "C-'") 'mdf-test))

;; (defvar mdf-mode nil)

;; (if (not (assq 'mdf-mode minor-mode-alist))
;;     (setq minor-mode-alist
;;              (cons '(mdf-mode " mdf-mode")
;; 		   minor-mode-alist)))

;; (defun mdf-mode (&optional arg)
;;            "mdf minor-mode"
;; 	   (interactive)
;; 	   ;mode variable settings
;; 	   (cond
;; 	    ((< (prefix-numeric-value arg) 0) ; 引数が1未満の数値なら起動しない
;; 	     (setq mdf-mode nil))
;; 	    (arg ; 何かしらの引数をもつならば起動
;; 	     (setq mdf-mode t))
;; 	    (t ; symbol t を引数にもつならばモードを逆転。
;; 	     (setq mdf-mode (not mdf-mode))))
;;             ;; content
;; 	   (if mdf-mode ; モードが起動されているならば実行
;; 	       (progn
;; 		 (setq tex-command "mdftest")
;; 		 (use-local-map mdf-mode-map)
;; 		 )
;; 	     nil))


;; (add-hook 'yatex-mode-hook
;; 	  '(lambda ()
;; 	     (cond
;; 	      ((string= (file-name-extension (buffer-file-name)) "mdf") (mdf-mode))
;; 	      (t (mdf-mode nil)))
;;            ))

;; (add-hook 'yatex-mode-hook
;; 	  '(lambda ()
;; 	     (cond
;; 	      ((string= (file-name-extension (buffer-file-name)) "mdf") (mdf-mode))
;; 	      (t (mdf-mode nil)))
;;            ))

  

;;----------------------------------------------------------------
;; #skim
;;
;; http://oku.edu.mie-u.ac.jp/~okumura/texwiki/?Emacs#de8b4fcd
;; inverse search
(require 'server)
(unless (server-running-p) (server-start))
 
;; forward search
;; Http://oku.edu.mie-u.ac.jp/~okumura/texwiki/?YaTeX#f978a43b
(defun skim-forward-search ()
  (interactive)
  (progn
    (process-kill-without-query
     (start-process  
      "displayline"
      nil
      "/Applications/Skim.app/Contents/SharedSupport/displayline"
      (number-to-string (save-restriction
                          (widen)
                          (count-lines (point-min) (point))))
      (expand-file-name
       (concat (file-name-sans-extension (or YaTeX-parent-file
                                             (save-excursion
                                               (YaTeX-visit-main t)
                                               buffer-file-name)))
               ".pdf"))
      buffer-file-name))))
 
(add-hook 'yatex-mode-hook
          '(lambda ()
             (define-key YaTeX-mode-map (kbd "C-c s") 'skim-forward-search)))



;;----------------------------------------------------------------
;; #dired
;;
;; dired-modeの色づけ
;(defvar *original-dired-font-lock-keywords* dired-font-lock-keywords)
;(defun dired-highlight-by-extensions (highlight-list)
;  "highlight-list accept list of (regexp [regexp] ... face)."
;  (let ((lst nil))
;    (dolist (highlight highlight-list)
;      (push `(,(concat "\\.\\(" (regexp-opt (butlast highlight)) "\\)$")
;              (".+" (dired-move-to-filename)
;               nil (0 ,(car (last highlight)))))
;            lst))
;    (setq dired-font-lock-keywords
;          (append *original-dired-font-lock-keywords* lst))))
;(dired-highlight-by-extensions
;  '(("txt" font-lock-variable-name-face)
;    ("odql" "tmpl" font-lock-type-face)
;    ("lisp" "el" "pl" font-lock-constant-face)))

;; emacsでls does not support –dired; see `dired-use-ls-dired’ for more details.と出たときの対処方法
;; # http://niku.name/articles/2013/04/30/emacs%E3%81%A7ls%20does%20not%20support%20--dired;%20see%20%60dired-use-ls-dired%27%20for%20more%20details.%E3%81%A8%E5%87%BA%E3%81%9F%E3%81%A8%E3%81%8D%E3%81%AE%E5%AF%BE%E5%87%A6%E6%96%B9%E6%B3%95
;(setq dired-use-ls-dired t)


;; ;;----------------------------------------------------------------
;; ;; #iswitchb
;; ;;
;; (iswitchb-mode 1)
;; (add-hook 'iswitchb-define-mode-map-hook
;;           'iswitchb-my-keys)
;; ;; 私はさらに，下のような設定を入れてキーバインドを変更しています．こうしておくと， 左右のカーソルキーやSPC でもバッファを切り替えることができます．
;; (defun iswitchb-my-keys ()
;;   "Add my keybindings for iswitchb."
;;   (define-key iswitchb-mode-map [right] 'iswitchb-next-match)
;;   (define-key iswitchb-mode-map [left] 'iswitchb-prev-match)
;;   (define-key iswitchb-mode-map "\C-f" 'iswitchb-next-match)
;;   (define-key iswitchb-mode-map " " 'iswitchb-next-match)
;;   (define-key iswitchb-mode-map "\C-b" 'iswitchb-prev-match)
;;   )
;; ;; 私はさらに，以下のようにして一部の関数を変更しました．これで， iswitchb に候補が なければ find-file になります．さらに，C-u C-x b で通常の C-x b と同 じ動作になります．
;; (defun iswitchb-possible-new-buffer (buf)
;;   "Possibly create and visit a new buffer called BUF."
;;   (interactive)
;;   (message (format
;;             "No buffer matching `%s', "
;;             buf))
;;   (sit-for 1)
;;   (call-interactively 'find-file buf))

;; (defun iswitchb-buffer (arg)
;;   "Switch to another buffer.

;; The buffer name is selected interactively by typing a substring.  The
;; buffer is displayed according to `iswitchb-default-method' -- the
;; default is to show it in the same window, unless it is already visible
;; in another frame.
;; For details of keybindings, do `\\[describe-function] iswitchb'."
;;   (interactive "P")
;;   (if arg
;;       (call-interactively 'switch-to-buffer)
;;     (setq iswitchb-method iswitchb-default-method)
;;     (iswitchb)))
;; ;;バッファ選択時にウィンドウに選択中のバッファの内容を表示させる設定
;; (defadvice iswitchb-exhibit
;;   (after
;;    iswitchb-exhibit-with-display-buffer
;;    activate)
;;   "選択している buffer を window に表示してみる。"
;;   (when (and
;;          (eq iswitchb-method iswitchb-default-method)
;;          iswitchb-matches)
;;     (select-window
;;      (get-buffer-window (cadr (buffer-list))))
;;     (let ((iswitchb-method 'samewindow))
;;       (iswitchb-visit-buffer
;;        (get-buffer (car iswitchb-matches))))
;;     (select-window (minibuffer-window))))


;;----------------------------------------------------------------
;; #icomplete-mode
;;
(icomplete-mode 1)



;;----------------------------------------------------------------
;; #anything
;;
;(require 'anything-config)

;(setq anything-sources (list anything-source-buffers
;                             anything-source-bookmarks
;                             ;;anything-source-recentf
;                             anything-source-file-name-history
;                             anything-source-locate-r
;                             anything-source-complex-command-history))
;(setq anything-type-actions (list anything-actions-buffer
;                                  anything-actions-file
;                                  anything-actions-sexp))

;(define-key anything-map "\C-p" 'anything-previous-line)
;(define-key anything-map "\C-n" 'anything-next-line)
;(define-key anything-map "\C-v" 'anything-next-page)
;(define-key anything-map "\M-v" 'anything-previous-page)


;; anything-filelist+
(require 'anything-startup)
(global-set-key (kbd "C-:") 'anything-filelist+)
;(setq anything-c-filelist-file-name "/tmp/mnt/all.filelist.takaai")
(setq anything-c-filelist-file-name "/tmp/all.filelist.takaai")


;;----------------------------------------------------------------
;; #helm
;;
(require 'helm)
(require 'helm-ag)
(require 'helm-descbinds)
(require 'helm-config)
(require 'helm-mode)

(helm-mode 1)

(helm-descbinds-mode)

;; helm版read-file-nameを標準のEmacsのものに戻す
;; http://rubikitch.com/2014/08/11/helm-avoid-find-files/
;; (defadvice helm-mode (around avoid-read-file-name activate)
;;   (let ((read-file-name-function read-file-name-function)
;;         (completing-read-function completing-read-function))
;;     ad-do-it))
;; (setq completing-read-function 'my-helm-completing-read-default)
;; (defun my-helm-completing-read-default (&rest _)
;;   (apply (cond ;; [2014-08-11 Mon]helm版のread-file-nameは重いからいらない
;;           ((eq (nth 1 _) 'read-file-name-internal)
;;            'completing-read-default)
;;           (t
;;            'helm--completing-read-default))
;;          _))

(global-set-key (kbd "C-;") 'helm-mini)
(global-set-key (kbd "C-c h") 'helm-mini)
(global-set-key (kbd "C-c b") 'helm-descbinds)
(global-set-key (kbd "C-c o") 'helm-occur)
(global-set-key (kbd "C-c g") 'helm-ag)
(global-set-key (kbd "C-c y") 'helm-show-kill-ring)
(global-set-key (kbd "C-c p") 'helm-recentf)
(global-set-key (kbd "M-y") 'helm-show-kill-ring)
(global-set-key (kbd "C-x C-b") 'helm-for-files)

(define-key global-map (kbd "M-x") 'helm-M-x)

;; For find-file etc.
(define-key helm-read-file-map (kbd "TAB") 'helm-execute-persistent-action)
;; For helm-find-files etc.
(define-key helm-find-files-map (kbd "TAB") 'helm-execute-persistent-action)
;; Emulate `kill-line' in helm minibuffer
(setq helm-delete-minibuffer-contents-from-point t)
(defadvice helm-delete-minibuffer-contents (before helm-emulate-kill-line activate)
  "Emulate `kill-line' in helm minibuffer"
  (kill-new (buffer-substring (point) (field-end))))
(define-key helm-map (kbd "C-h") 'delete-backward-char)
;; (define-key helm-find-files-map (kbd "C-h") 'delete-backward-char)


;;
;; http://fukuyama.co/nonexpansion
;;
;; 自動補完を無効
(custom-set-variables '(helm-ff-auto-update-initial-value nil))
;; C-hでバックスペースと同じように文字を削除  
(define-key helm-c-read-file-map (kbd "C-h") 'delete-backward-char)
;; TABで任意補完。選択肢が出てきたらC-nやC-pで上下移動してから決定することも可能
(define-key helm-c-read-file-map (kbd "TAB") 'helm-execute-persistent-action)


(add-to-list 'helm-completing-read-handlers-alist '(find-file . nil))
(add-to-list 'helm-completing-read-handlers-alist '(dired-do-copy . nil))
(add-to-list 'helm-completing-read-handlers-alist '(dired-do-rename . nil))
(add-to-list 'helm-completing-read-handlers-alist '(dired-create-directory . nil))
;; (add-to-list 'helm-completing-read-handlers-alist '(write-file . nil))

;; for helm-migemo
(require 'helm-migemo)
(setq helm-use-migemo)

;; C-x C-v C-k C-g で現在のファイル名をコピーしたい
;; Disable helm in some functions
;; http://d.hatena.ne.jp/a_bicky/20140104/1388822688
(add-to-list 'helm-completing-read-handlers-alist '(find-alternate-file . nil))
;; find-file や write-file のインタフェースが気に食わない場合は次の内容も追加すると良いと思います。
(add-to-list 'helm-completing-read-handlers-alist '(find-file . nil))
(add-to-list 'helm-completing-read-handlers-alist '(write-file . nil))

;;  C-x C-f でタブ補完（選択）できない
;; Helm はタブに helm-select-action が割り当てられているので、基本的にファイル名を補完する目的でタブを押しても意味が
;;ありません。
;; タブでファイル名を補完したい場合はタブに helm-execute-persistent-action（C-z を押した時に実行されるコマンド）を割り当てておきます。
;; http://d.hatena.ne.jp/a_bicky/20140104/1388822688
;; For find-file etc.
(define-key helm-read-file-map (kbd "TAB") 'helm-execute-persistent-action)
;;For helm-find-files etc.
(define-key helm-find-files-map (kbd "TAB") 'helm-execute-persistent-action)
;;For find-file etc.
(define-key helm-map (kbd "C-i") 'helm-select-action)


;;----------------------------------------------------------------
;; #helm-ag-r
;; http://sleepboy-zzz.blogspot.jp/2013/10/emacsaghelmhelm-ag-r_4267.html
(require 'helm-ag-r)
(setq
 helm-ag-r-google-contacts-user "takoyaj@gmail.com"
 helm-ag-r-google-contacts-lang "ja_JP.UTF-8"
 ;;agのオプションを指定します。C-oで次のオプションに移動します。 C-rで逆にオプションを移動
 helm-ag-r-option-list '("-S -U --hidden"
                         "-S -U -g")
 ;; 不安定な場合以下の項目を調整すれば
 ;; よくなるかもしれません
 helm-ag-r-requires-pattern 3    ; 文字数以上入力してから検索
 helm-ag-r-input-idle-delay 0.5  ; 検索をdelay後からおこなう
 helm-ag-r-use-no-highlight t    ; ハイライト無効化
 helm-ag-r-candidate-limit 1000) ; 候補の上限を設定

(global-set-key (kbd "C-x C-g") 'helm-ag-r)



;;----------------------------------------------------------------
;; #helm-swoop
;;
;; helm from https://github.com/emacs-helm/helm
;; helm-swoopを使うためにはhelmが必要です
(require 'helm)

;; ;; http://rubikitch.com/category/helm/
;; ;; 141225040059.helm-swoop.1.el
;; ;; この前にmigemoの設定が必要
;; (require 'helm-migemo)
;; ;; この修正が必要
;; (eval-after-load "helm-migemo"
;;   '(defun helm-compile-source--candidates-in-buffer (source)
;;      (helm-aif (assoc 'candidates-in-buffer source)
;;          (append source
;;                  `((candidates
;;                     . ,(or (cdr it)
;;                            (lambda ()
;;                              ;; Do not use `source' because other plugins
;;                              ;; (such as helm-migemo) may change it
;;                              (helm-candidates-in-buffer (hel m-get-current-source)))))
;;                    (volatile) (match identity)))
;;        source)))


(require 'helm-swoop)
;; isearchからの連携を考えるとC-r/C-sにも割り当て推奨
(define-key helm-swoop-map (kbd "C-r") 'helm-previous-line)
(define-key helm-swoop-map (kbd "C-s") 'helm-next-line)

;; ;; 検索結果をcycleしない、お好みで
;; (setq helm-swoop-move-to-line-cycle nil)

;; (cl-defun helm-swoop-nomigemo (&key $query ($multiline current-prefix-arg))
;;   "シンボル検索用Migemo無効版helm-swoop"
;;   (interactive)
;;   (let ((helm-swoop-pre-input-function
;;          (lambda () (format "\\_<%s\\_> " (thing-at-point 'symbol)))))
;;     (helm-swoop :$source (delete '(migemo) (copy-sequence (helm-c-source-swoop)))
;;                 :$query $query :$multiline $multiline)))
;; ;; C-M-:に割り当て
;; (global-set-key (kbd "C-M-:") 'helm-swoop-nomigemo)

;; ;; [2014-11-25 Tue]
;; (when (featurep 'helm-anything)
;;   (defadvice helm-resume (around helm-swoop-resume activate)
;;     "helm-anything-resumeで復元できないのでその場合に限定して無効化"
;;     ad-do-it))

;; ;; helm-swoopフォルダを任意の位置に置きます
;; (add-to-list 'load-path "~/.emacs.d/elisp/helm-swoop")

;; キーバインドはお好みで
(global-set-key (kbd "M-i") 'helm-swoop)
(global-set-key (kbd "M-I") 'helm-swoop-back-to-last-point)
(global-set-key (kbd "C-c M-i") 'helm-multi-swoop)
(global-set-key (kbd "C-x M-i") 'helm-multi-swoop-all)

;; ;; isearch実行中にhelm-swoopに移行
;; (define-key isearch-mode-map (kbd "M-i") 'helm-swoop-from-isearch)
;; ;; helm-swoop実行中にhelm-multi-swoop-allに移行
;; (define-key helm-swoop-map (kbd "M-i") 'helm-multi-swoop-all-from-helm-swoop)

;; ;; Save buffer when helm-multi-swoop-edit complete
;; (setq helm-multi-swoop-edit-save t)

;; ;; 値がtの場合はウィンドウ内に分割、nilなら別のウィンドウを使用
;; (setq helm-swoop-split-with-multiple-windows nil)

;; ;; ウィンドウ分割方向 'split-window-vertically or 'split-window-horizontally
;; (setq helm-swoop-split-direction 'split-window-vertically)

;; ;; nilなら一覧のテキストカラーを失う代わりに、起動スピードをほんの少し上げる
;; (setq helm-swoop-speed-or-color t)


;;----------------------------------------------------------------
;; helm/anything.el検索結果を次々と辿る方法
;; http://rubikitch.com/2014/11/27/helm-next-error/
;; 141127102557.helm-next-error.1.el
;; helm-occurの後でしか機能しない
;;;; replacement of `next-error' and `previous-error'

(require 'helm-anything nil t)
(require 'helm)

;;; resumable helm/anything buffers
(defvar helm-resume-goto-buffer-regexp
  (rx (or (regexp "Helm Swoop") "helm imenu" (regexp "helm.+grep") "helm-ag"
          "occur"
          "*anything grep" "anything current buffer")))
(defvar helm-resume-goto-function nil)
(defun helm-initialize--resume-goto (resume &rest _)
  (when (and (not (eq resume 'noresume))
             (ignore-errors
               (string-match helm-resume-goto-buffer-regexp helm-last-buffer)))
    (setq helm-resume-goto-function
          (list 'helm-resume helm-last-buffer))))
(advice-add 'helm-initialize :after 'helm-initialize--resume-goto)
(defun anything-initialize--resume-goto (resume &rest _)
  (when (and (not (eq resume 'noresume))
             (ignore-errors
               (string-match helm-resume-goto-buffer-regexp anything-last-buffer)))
    (setq helm-resume-goto-function
          (list 'anything-resume anything-last-buffer))))
(advice-add 'anything-initialize :after 'anything-initialize--resume-goto)

;;; next-error/previous-error
(defun compilation-start--resume-goto (&rest _)
  (setq helm-resume-goto-function 'next-error))
(advice-add 'compilation-start :after 'compilation-start--resume-goto)
(advice-add 'occur-mode :after 'compilation-start--resume-goto)
(advice-add 'occur-mode-goto-occurrence :after 'compilation-start--resume-goto)
(advice-add 'compile-goto-error :after 'compilation-start--resume-goto)


(defun helm-resume-and- (key)
  (unless (eq helm-resume-goto-function 'next-error)
    (if (fboundp 'helm-anything-resume)
        (setq helm-anything-resume-function helm-resume-goto-function)
      (setq helm-last-buffer (cadr helm-resume-goto-function)))
    (execute-kbd-macro
     (kbd (format "%s %s RET"
                  (key-description (car (where-is-internal
                                         (if (fboundp 'helm-anything-resume)
                                             'helm-anything-resume
                                           'helm-resume))))
                  key)))
    (message "Resuming %s" (cadr helm-resume-goto-function))
    t))
(defun helm-resume-and-previous ()
  "Relacement of `previous-error'"
  (interactive)
  (or (helm-resume-and- "C-p")
      (call-interactively 'previous-error)))
(defun helm-resume-and-next ()
  "Relacement of `next-error'"
  (interactive)
  (or (helm-resume-and- "C-n")
      (call-interactively 'next-error)))

;;; Replace: next-error / previous-error
(require 'helm-config)
(ignore-errors (helm-anything-set-keys))
(global-set-key (kbd "M-g M-n") 'helm-resume-and-next)
(global-set-key (kbd "M-g M-p") 'helm-resume-and-previous)



;; ;;----------------------------------------------------------------
;; ;; # helm-yasnippet
;; ;; http://d.hatena.ne.jp/syohex/20121207/1354885367
;; ;;
;; (defun my-yas/prompt (prompt choices &optional display-fn)
;;   (let* ((names (loop for choice in choices
;;                       collect (or (and display-fn (funcall display-fn choice))
;;                                   choice)))
;;          (selected (helm-other-buffer
;;                     `(((name . ,(format "%s" prompt))
;;                        (candidates . names)
;;                        (action . (("Insert snippet" . (lambda (arg) arg))))))
;;                     "*helm yas/prompt*")))
;;     (if selected
;;         (let ((n (position selected names :test 'equal)))
;;           (nth n choices))
;;       (signal 'quit "user quit!"))))
;; (custom-set-variables '(yas/prompt-functions '(my-yas/prompt)))


;;----------------------------------------------------------------
;; #helm-c-yasnippet
;;
(when (require 'yasnippet nil t)
  (when (require 'helm-c-yasnippet nil t)
    (setq helm-c-yas-space-match-any-greedy t) ;[default: nil]
    (global-set-key (kbd "C-x y") 'helm-c-yas-complete)
    )
  )



;;----------------------------------------------------------------
;; # helm-dired-recent-dirs
;; よく行くディレクトリに移動する
;; http://qiita.com/akisute3@github/items/ba0a90c1dd4298e99e30
;;
(require 'helm-dired-recent-dirs)
(global-set-key (kbd "C-c j") 'helm-dired-recent-dirs-view)


;;----------------------------------------------------------------
;; helmでカレントディレクトリのファイルを見やすく開く
;; http://d.hatena.ne.jp/syohex/20120718/1342621981
(require 'cl)
(require 'helm-config)
(require 'helm-files)

(defvar my/helm-c-current-directory-source
  `((name . "Current Directory Files")
    (candidates . (lambda ()
                    (with-helm-current-buffer
                      (let ((dirs (directory-files (helm-c-current-directory)))
                            (filter (lambda (d) (string-match "^\.\.?$" d))))
                        (remove-if filter dirs)))))
    (type . file)))

(defun my/helm-find-file-current-directory ()
  (interactive)
  (let ((curbuf (current-buffer))
        (orig-major major-mode))
    (if (helm-other-buffer 'my/helm-c-current-directory-source "*helm-dired*")
        (and (eq orig-major 'dired-mode) (kill-buffer curbuf)))))

(global-set-key (kbd "C-x C-p") 'my/helm-find-file-current-directory)


;;----------------------------------------------------------------
;; #ace-jump-mode
;; http://d.hatena.ne.jp/rkworks/20120520/1337528737
;;
(require 'ace-jump-mode)
(defun add-keys-to-ace-jump-mode (prefix c &optional mode)
  (define-key global-map
    (read-kbd-macro (concat prefix (string c)))
    `(lambda ()
       (interactive)
       (funcall (if (eq ',mode 'word)
                    #'ace-jump-word-mode
                  #'ace-jump-char-mode) ,c))))

(loop for c from ?0 to ?9 do (add-keys-to-ace-jump-mode "H-" c))
(loop for c from ?a to ?z do (add-keys-to-ace-jump-mode "H-" c))
(loop for c from ?! to ?~ do (add-keys-to-ace-jump-mode "H-" c))
(loop for c from ?0 to ?9 do (add-keys-to-ace-jump-mode "H-M-" c 'word))
(loop for c from ?a to ?z do (add-keys-to-ace-jump-mode "H-M-" c 'word))
(loop for c from ?! to ?~ do (add-keys-to-ace-jump-mode "H-M-" c 'word))


;;----------------------------------------------------------------
;; #ace-isearch
;;
(global-ace-isearch-mode 1)

;;----------------------------------------------------------------
;; helm-bm
;;

(require 'bm)
(defun bm-find-files-in-repository ()
  (interactive)
  (cl-loop for (key . _) in bm-repository
           when (file-exists-p key)
           do (find-file-noselect key)))
(defun bm-repository-load-and-open ()
  (interactive)
  (bm-repository-load)
  (bm-find-files-in-repository))

(setq bm-repository-file "~/.emacs.d/bm-repository")
(setq-default bm-buffer-persistence t)
(setq bm-restore-repository-on-load t)
(add-hook 'after-init-hook 'bm-repository-load-and-open)
(defun bm-buffer-restore-safe ()
  (ignore-errors (bm-buffer-restore)))
(add-hook 'find-file-hooks 'bm-buffer-restore-safe)
(add-hook 'kill-buffer-hook 'bm-buffer-save)
(defun bm-save-to-repository ()
  (interactive)
  (unless noninteractive
    (bm-buffer-save-all)
    (bm-repository-save)))
(add-hook 'kill-emacs-hook 'bm-save-to-repository)
(run-with-idle-timer 600 t 'bm-save-to-repository)
(add-hook 'after-revert-hook 'bm-buffer-restore)
(add-hook 'vc-before-checkin-hook 'bm-buffer-save)
(add-hook 'before-save-hook 'bm-buffer-save)

(require 'helm-bm)
;; migemoくらいつけようね
(push '(migemo) helm-source-bm)
;; annotationはあまり使わないので仕切り線で表示件数減るの嫌
(setq helm-source-bm (delete '(multiline) helm-source-bm))

(defun bm-toggle-or-helm ()
  "2回連続で起動したらhelm-bmを実行させる"
  (interactive)
  (bm-toggle)
  (when (eq last-command 'bm-toggle-or-helm)
    (helm-bm)))
(global-set-key (kbd "C-\\") 'bm-toggle-or-helm)


;;----------------------------------------------------------------
;; #wdired
;;
(require 'wdired)
(define-key dired-mode-map "r" 'wdired-change-to-wdired-mode)
(setq wdired-allow-to-change-permissions t)



;;----------------------------------------------------------------
;; #server start for emacs-client
;;
(require 'server)
(unless (server-running-p)
  (server-start))


;;----------------------------------------------------------------
;; #migemo
;;
(require 'migemo)
(setq migemo-command "cmigemo")
(setq migemo-options '("-q" "--emacs"))
(setq migemo-dictionary "/usr/local/share/migemo/utf-8/migemo-dict")
(setq migemo-user-dictionary nil)
(setq migemo-regex-dictionary nil)
(setq migemo-coding-system 'utf-8-unix)
(load-library "migemo")
(migemo-init)


;;----------------------------------------------------------------
;; color-moccur
;;
;;; color-moccur.elの設定

;; (require 'color-moccur)
;; ;; 複数の検索語や、特定のフェイスのみマッチ等の機能を有効にする
;; ;; 詳細は http://www.bookshelf.jp/soft/meadow_50.html#SEC751
;; (setq moccur-split-word t)
;; ;; migemoがrequireできる環境ならmigemoを使う
;; (when (require 'migemo nil t) ;第三引数がnon-nilだとloadできなかった場合にエラーではなくnilを返す
;;   (setq moccur-use-migemo t))

;;http://nya-0.hatenablog.com/entry/2014/06/07/190016

;; color-moccurの設定
(when (require 'color-moccur nil t)
;;M-oにoccur-by-moccurを割り当て
(define-key global-map (kbd "M-o") 'occur-by-moccur)
;;スペース区切りでAND検索
(setq moccur-split-word t)
;;ディレクトリ検索するときの除外ファイル
(add-to-list 'dmoccur-exclusion-mask "\\.DS_Store")
(add-to-list 'dmoccur-exclusion-mask "^#.+#$")
;;Migemoを利用できる環境であればMigemoを使う
(when (and (executable-find "/usr/local/bin/cmigemo") ;;このパスも、自分の環境に合わせて変更してください
     (require 'migemo nil t))
(setq moccur-use-migemo t)))

(global-set-key "\C-c\C-g" 'moccur-grep-find)

;; moccur-editの設定
(require 'moccur-edit nil t)




;;----------------------------------------------------------------
;; #skk
;;
(setq skk-user-directory "~/.emacs.d/ddskk/") ; ディレクトリ指定
(require 'skk-autoloads)
;(global-set-key "\C-xt" 'skk-tutorial)

;; SKK を起動する
(global-set-key "\M-`" 'my-skk-mode)

;; ~/.skk にいっぱい設定を書いているのでバイトコンパイルしたい
(setq skk-byte-compile-init-file t)

(defun skk-mode-start ()
  (key-combo-mode 1)
  (skk-mode))

(defun skk-mode-stop ()
  (key-combo-mode 0)
  (skk-mode))

(define-minor-mode my-skk-mode
  (if my-skk-mode
      (skk-mode-start)
    (skk-mode-stop)))

(setq skk-sticky-key ";")

;; (add-hook 'skk-mode-hook
;;   '(lambda ()
;;     (key-combo-mode 0)))


;; sticky
;; e として， Shift キーを使わずに設定
;; http://homepage1.nifty.com/blankspace/emacs/sticky.html
;; (defvar sticky-key ";")
;; (defvar sticky-list
;;   '(
;;     ("a" . "A") ("b" . "B") ("c" . "C") ("d" . "D") ("e" . "E") ("f" . "F") ("g" . "G")
;;     ("h" . "H") ("i" . "I") ("j" . "J") ("k" . "K") ("l" . "L") ("m" . "M") ("n" . "N")
;;     ("o" . "O") ("p" . "P") ("q" . "Q") ("r" . "R") ("s" . "S") ("t" . "T") ("u" . "U")
;;     ("v" . "V") ("w" . "W") ("x" . "X") ("y" . "Y") ("z" . "Z")
;;     ("1" . "!") ("2" . "\"") ("3" . "#") ("4" . "$") ("5" . "%") ("6" . "&") ("7" . "'")
;;     ("8" . "(") ("9" . ")") ("0" . "~")
;;     ("@" . "`") ("[" . "{") ("]" . "}") ("-" . "=") (":" . "*") ("," . "<") ("." . ">")
;;     ("/" . "?") (";" . "+") ("\\" . "|") ("^" . "_")
;;     ))
;; (defvar sticky-map (make-sparse-keymap))
;; (define-key global-map sticky-key sticky-map)
;; (mapcar (lambda (pair)
;;           (define-key sticky-map (car pair)
;;             `(lambda() (interactive)
;;                (setq unread-command-events
;;                      (cons , (string-to-char (cdr pair)) unread-command-events)))))
;;         sticky-list)
;; (define-key sticky-map sticky-key '(lambda () (interactive) (insert sticky-key)))
;; (add-hook 'skk-mode-hook
;;           (lambda ()
;;             (progn
;;               (define-key skk-j-mode-map sticky-key sticky-map)
;;               (define-key skk-jisx0208-latin-mode-map sticky-key sticky-map)
;;               (define-key skk-abbrev-mode-map sticky-key sticky-map)
;;               )
;;             ))

;;
;; SKKで「かなモード」のときに「$」を入力すると自動的に「アスキーモード」に切り替える
;;
;; in yatex.el
;;
;; (defun YaTeX-insert-dollar ()
;;   (interactive)
;;   (if (or (not (YaTeX-closable-p))
;; 	  (= (preceding-char) 92)
;; 	  (and (YaTeX-in-math-mode-p)
;; 	       (or (/= (preceding-char) ?$) (/= (following-char) ?$))))
;;       (insert "$")
;;     (insert "$$")
;;     (forward-char -1)
;;     (YaTeX-jmode-off)
;;     (key-combo-mode 1) ;;ここに手を加えてある
;;     (or YaTeX-auto-math-mode YaTeX-math-mode (YaTeX-toggle-math-mode 1))))

(add-hook 'skk-mode-hook
         (lambda ()
           (if (eq major-mode 'yatex-mode)
               (progn
                 (define-key skk-j-mode-map "¥¥" 'self-insert-command)
                 (define-key skk-j-mode-map "$" 'YaTeX-insert-dollar)
                 (define-key skk-j-mode-map (kbd "M-SPC") 'YaTeX-insert-dollar)
                 ))
           ))


;; (setq skk-mode-hook
 ;; 		 '(lambda ()
 ;; 		    (if (eq major-mode 'yatex-mode)
 ;; 			(define-key skk-map "$" 'YaTeX-insert-dollar)
 ;; 		      (define-key skk-map "$" 'skk-self-insert))
 ;; 		    (define-key skk-map "\C-x$"
 ;; 		      'skk-display-code-for-char-at-point)))

; 送り仮名が厳密に正しい候補を優先して表示
(setq skk-henkan-strict-okuri-precedence t)
; 漢字登録時、送り仮名が厳密に正しいかをチェック
(setq skk-check-okurigana-on-touroku t)
; AquaSKK と辞書の共有
;(setq skk-server-host "localhost")
;(setq skk-server-portnum 1178)
; 句点、読点変更
;(setq-default skk-kutouten-type 'en)
; 
(setq skk-dcomp-multiple-activate t)

;; YaTeX のときだけ句読点を変更したい
(add-hook 'yatex-mode-hook
	  (lambda ()
	    (require 'skk)
	    (setq skk-kutouten-type 'en)))

;; チュートリアルファイルの指定
(setq skk-tut-file "~/.emacs.d/share/skk/SKK.tut")

;; Emacs 起動時に SKK を前もってロードする
(setq skk-preload t)

;;C-c b でアンドゥ確定
;(add-hook 'skk-mode-hook 
;          (lambda ()
;            (define-key skk-j-mode-map "\C-cb" 'skk-undo-kakutei)
;            ))
;;コメント行を抜けたらasciiにする。
;(add-hook 'skk-load-hook
;          (lambda ()
;            (require 'context-skk)))

;;----------------------------------------------------------------
;; google-ime-skk
;; https://github.com/akiym/go-skkserv
;; http://sleepboy-zzz.blogspot.jp/
;; (require 'skk-server)

;; (setq skk-server-host "0.0.0.0"
;;       skk-server-prog "~/bin/google_ime_skk" ; ビルドしたgo-skkservへのパス
;;       skk-server-portnum 55100)

;; (defun my/boot-skk-server ()
;;   "Start SKK server."
;;   (unless (skk-server-live-p)
;;     (async-shell-command skk-server-prog (get-buffer-create "*goskk*"))
;;     (setq skkserv-process (skk-open-server-1))
;;     (when (skk-server-live-p)
;;       (set-process-coding-system skkserv-process 'utf-8 'utf-8))))

;; (defun my/skk-close-server ()
;;   (interactive)
;;   (when (skk-server-live-p)
;;     (skk-disconnect-server)
;;     (kill-process (get-buffer-process "*goskk*"))
;;     (message "Server disconnected")))

;; (add-hook 'kill-emacs-hook 'my/skk-close-server)





;;----------------------------------------------------------------
;; auto-save-buffers
;;
;(require 'auto-save-buffers)
;(run-with-idle-timer 0.5 t 'auto-save-buffers) 
(require 'auto-save-buffers-enhanced)
(setq auto-save-buffers-enhanced-interval 3) ; 指定のアイドル秒で保存
(auto-save-buffers-enhanced t)


;;----------------------------------------------------------------
;; auto-complete
;;
;(add-to-list 'load-path "~/.emacs.d/auto-complete")
;(add-to-list 'ac-dictionary-directories "~/.emacs.d/auto-complete/dict")
;(ac-config-default)

;; カスタマイズ
;(setq ac-auto-start 2)  ;; n文字以上の単語の時に補完を開始
;(setq ac-delay 0.05)  ;; n秒後に補完開始
;(setq ac-use-fuzzy t)  ;; 曖昧マッチ有効
;(setq ac-use-comphist t)  ;; 補完推測機能有効
;(setq ac-auto-show-menu 0.05)  ;; n秒後に補完メニューを表示
;(setq ac-quick-hel-delay 0.5)  ;; n秒後にクイックヘルを表示
;(setq ac-ignore-case nil)  ;; 大文字・小文字を区別する

;; auto-complete の候補に日本語を含む単語が含まれないようにする
;; http://d.hatena.ne.jp/IMAKADO/20090813/1250130343
;(defadvice ac-word-candidates (after remove-word-contain-japanese activate)
;  (let ((contain-japanese (lambda (s) (string-match (rx (category japanese)) s))))
;    (setq ad-return-value
;          (remove-if contain-japanese ad-return-value))))


;;
;; http://fukuyama.co/emacs-auto-complete
;;

;(defvar ac-dir (expand-file-name "~/.emacs.d/elpa/auto-complete-20140618.2217"))
;(add-to-list 'load-path ac-dir)
;(add-to-list 'load-path (concat ac-dir "/lib/ert"))
;(add-to-list 'load-path (concat ac-dir "/lib/fuzzy"))
;(add-to-list 'load-path (concat ac-dir "/lib/popup"))

(require 'auto-complete)
(require 'auto-complete-config)
(global-auto-complete-mode t)
(define-key ac-completing-map (kbd "TAB") 'ac-complete) ;;TABで補完を完了する

;; C-n / C-p で選択
;; (define-key ac-completing-map (kbd "C-n") 'ac-next)
;; (define-key ac-completing-map (kbd "C-p") 'ac-previous)

(setq ac-use-menu-map t)
;; デフォルトで設定済み
(define-key ac-menu-map "\C-n" 'ac-next)
(define-key ac-menu-map "\C-p" 'ac-previous)

;(setq ac-use-menu-map t) ;; C-n / C-p で選択
(setq ac-auto-show-menu 0.3) ;; 候補が出るまでの時間 default 0.8

;1. 一つしか候補がない時にTAB(ac-expand)すると補完を完了(ac-complete)する
;2. 次候補/前候補を選んだ後にTAB(ac-expand)すると補完を完了(ac-complete)する
;3. 補完後にメニューを自動的に非表示にする
(setq ac-dwim t)


;; ユーザ辞書の場所
(defvar ac-user-dict-dir (expand-file-name "~/.emacs.d/ac-user-dict/"))

;; コンプリート時の動作 - 候補の末尾に()があればその内にカーソルを置く
;(defun ac-go-into-braces-action ()
;  (save-restriction
;    (narrow-to-region (point) (- (point) 2))
;    (if (re-search-backward "()" nil t)
;        (forward-char))))

;; 直前の文字を区別して辞書を使用する - 何か1文字+ドットの後の場合に補完する
;(defun ac-js-dot-prefix ()
;  "`x.' prefix."
;  (if (re-search-backward ".\\.\\(.*\\)" nil t)
;      ;; ".\\.\\(.*\\)" 何か一文字[.] ドット[\\.] 補完開始点[\\(.*\\)]
;      (match-beginning 1)))

;; メニューで選択中の候補の色設定
;(defface ac-my-selection-face
;  '((t (:background "#000080" :foreground "#ffffff")))
;  "Face for selectied candidates."
;  :group 'auto-complete)

;;; 辞書1 (underscore.js)
;; 色設定
;(defface ac-underscore-js-candidate-face
;  '((t (:background "#730CE8" :foreground "#eeeeee")))
;  "Face for underscore.js candidates."
;  :group 'auto-complete)
;; 情報源に辞書ファイルを指定
;(defvar ac-underscore-js-cache
;  (ac-file-dictionary (concat ac-user-dict-dir "underscore-js")))
;; 辞書1の設定
;(defvar ac-source-underscore-js-dict
;  '((candidates . ac-underscore-js-cache) ;; 候補の情報源 これ以下はオプション
;    (candidate-face . ac-underscore-js-candidate-face) ;; 候補の色設定
;    (selection-face . ac-my-selection-face) ;; 選択中の色設定
;    (prefix . ac-js-dot-prefix) ;; 直前の文字の条件
;    (action . ac-go-into-braces-action) ;; 補完後の動作
;    (symbol . "underscore.js") ;; ライブラリ名 (無理矢理。本来の意図とは違うはず)
;    ;; (requires . 2) ;; 補完が開始される最低入力文字数を上書き
;    ;; (limit . 30) ;; 候補を一度に表示する上限数を上書き
;    ))

;;; 辞書2 (jquery)
;; 色設定
;(defface ac-jquery-candidate-face
;  '((t (:background "#1f679a" :foreground "#eeeeee")))
;  "Face for jquery candidates."
;  :group 'auto-complete)
;; 情報源に辞書ファイルを指定
;(defvar ac-jquery-method1-cache
;  (ac-file-dictionary (concat ac-user-dict-dir "jquery-method1")))
;; 辞書2の設定
;(defvar ac-source-jquery-method-dict1
;  '((candidates . ac-jquery-method1-cache)
;    (candidate-face . ac-jquery-candidate-face)
;    (selection-face . ac-my-selection-face)
;    (prefix . ac-js-dot-prefix)
;    (action . ac-go-into-braces-action)
;    (symbol . "jquery method1")
;    ))

;;; 辞書3 (jquery)
;; 直前の文字の条件 (`jQuery.'または`$.')
;(defun ac-jquery-method2-prefix ()
;  "`$' or `jQuery' prefix."
;  (if (re-search-backward "\\(jQuery\\|\\$\\)\\.\\(.*\\)" nil t)
;      (match-beginning 2)))
;; 情報源に辞書ファイルを指定
;(defvar ac-jquery-method2-cache
;  (ac-file-dictionary (concat ac-user-dict-dir "jquery-method2")))
;; 辞書3の設定
;(defvar ac-source-jquery-method-dict2
;  '((candidates . ac-jquery-method2-cache)
;    (candidate-face . ac-jquery-candidate-face)
;    (selection-face . ac-my-selection-face)
;    (prefix . ac-jquery-method2-prefix)
;    (action . ac-go-into-braces-action)
;    (symbol . "jquery method2")
;    ))

;;; 辞書4 (jqueryセレクタ)
;; 直前の文字の条件 (`x:')
;(defun ac-jquery-selector-prefix ()
;  "`x:' prefix."
;  (if (re-search-backward ".\\:\\(.*\\)" nil t)
;      (match-beginning 1)))
;; 色設定
;(defface ac-jquery-selector-candidate-face
;  '((t (:background "#1B919A" :foreground "#eeeeee")))
;  "Face for jquery selector candidates."
;  :group 'auto-complete)
;; 情報源に辞書ファイルを指定
;(defvar ac-jquery-selector-cache
;  (ac-file-dictionary (concat ac-user-dict-dir "jquery-selector")))
;; 辞書4の設定
;(defvar ac-source-jquery-selector-dict
;  '((candidates . ac-jquery-selector-cache)
;    (candidate-face . ac-jquery-selector-candidate-face)
;    (selection-face . ac-my-selection-face)
;    (prefix . ac-jquery-selector-prefix)
;    (action . ac-go-into-braces-action)
;    (symbol . "jQuery selector")
;    ))

;; 使用する辞書・情報源を選択
;(defun ac-js-mode-setup ()
;  (setq ac-sources
;        '(
;          ac-source-abbrev
;          ac-source-words-in-same-mode-buffers
;          ;; ac-source-yasnippet
;          ac-source-filename
;          ;; 優先順位で並べる (prefixを指定すると排他的になる; x.に$.が含まれる)
;          ac-source-jquery-method-dict2  ; prefix `$.'
;          ac-source-jquery-method-dict1  ; prefix `x.'
;          ac-source-underscore-js-dict   ; prefix `x.'
;          ac-source-jquery-selector-dict ; prefix `x:'
;          )))
;; メジャーモードに反映させる
; (add-hook 'js-mode-hook 'ac-js-mode-setup)
; (add-hook 'js2-mode-hook 'ac-js-mode-setup)

;; 辞書間で重複するものが削除されるので
;; ~/.emacs.d/elisp/auto-complete/auto-complete.el L1052 (delete-dups candidates) をコメントアウト

;; ac-disable-facesの初期値は
;; (font-lock-comment-face font-lock-string-face font-lock-doc-face)
;; font-lock-string-faceがあるとクオートで囲まれた部分"..."で
;; auto-completeが反応しなくなり、セレクタを補完できないので次のように
;(setq ac-disable-faces '(font-lock-comment-face font-lock-doc-face))




;;----------------------------------------------------------------
;; #auto-complete-mode for latex
;;


;(require 'auto-complete-latex)
;(setq ac-l-dict-directory "~/.emacs.d/ac-l-dict/")
;(add-to-list 'ac-modes 'latex-mode)
;(add-hook 'latex-mode-hook 'ac-l-setup)
;; for YaTeX
;(when (require 'auto-complete-latex nil t)
;  (setq ac-l-dict-directory "~/.emacs.d/ac-l-dict/")
;  (add-to-list 'ac-modes 'yatex-mode)
;  (add-hook 'yatex-mode-hook 'ac-l-setup))



;; auto-complete-mode for latex light 
(require 'auto-complete-latex-light)
(setq ac-ll-dict-directory "~/.emacs.d/elisp/ac-ll-dict/")
(add-to-list 'ac-modes 'latex-mode)
(add-hook 'latex-mode-hook
	  (lambda ()
	    ;; Set the ac-sources you like.
	    (setq ac-sources
		  '(ac-source-filename
		    ac-source-latex-dictionary
		    ac-source-latex-commands-in-same-mode-buffers
		    ac-source-abbrev
		    ac-source-dictionary
		    ac-source-yasnippet))))
; for YaTeX
(when (require 'auto-complete-latex-light nil t)
  (setq ac-l-dict-directory "~/.emacs.d/elisp/ac-ll-dict/")
  (add-to-list 'ac-modes 'yatex-mode)
  (add-hook 'yatex-mode-hook
	    (lambda ()
	      ;; Set the ac-sources you like.
	      (setq ac-sources
		    '(ac-source-filename
		      ac-source-latex-dictionary
		      ac-source-latex-commands-in-same-mode-buffers
		      ac-source-abbrev
		      ac-source-dictionary
		      ac-source-yasnippet)))))



;;----------------------------------------------------------------
;; #ac-skk
;;
;;補完候補としたい辞書ファイルの場所を指定します。
;(setq ac-skk-jisyo-file "~/.emacs.d/ddskk/jisyo")
;;補完候補生成に必要な中間ファイルを置く場所を指定します。
;(setq ac-skk-alist-file "~/.emacs.d/ac-skk-alist.el")

;(ac-skk-enable)


;;----------------------------------------------------------------
;; #ac-ja
;;
; ac-source-dabbrev-ja
;(require 'ac-ja)
;(setq ac-sources (append ac-sources '(ac-source-dabbrev-ja)))

;;補完候補としたい辞書ファイルの場所を指定します。
;(setq ac-skk-jisyo-file "~/Library/Application\ Support/AquaSKK/SKK-JISYO.L")
;;補完候補生成に必要な中間ファイルを置く場所を指定します。
;(setq ac-skk-alist-file "~/.emacs.d/auto-complete/ac-skk-alist.el") 
;(require 'ac-ja) 
;(setq ac-sources (append ac-sources '(ac-source-skk)))

;(eval-after-load "skk"
;  '(progn
;     (defadvice skk-kakutei (after ad-skk-kakutei last)
;       "skk-kakuteiの後にatuo-complete-modeによる補完を実行するadvice"
;       (unless (minibufferp)
;         (ac-start)))))

;(add-hook 'skk-mode-hook 
;          (lambda () 
;            "skk-kakuteiのadviceを活性化" 
;            (interactive)
;            (ad-activate 'skk-kakutei)))

;(defadvice skk-mode-exit (before ad-skk-mode-exit last)
;       "skk-modeから抜ける時にskk-kakuteiのadviceを不活性化。"
;       (ad-deactivate 'skk-kakutei))


;(eval-after-load "skk"
;  '(progn
;     (defadvice skk-kakutei (after ad-skk-kakutei last)
;       "skk-kakuteiの後にatuo-complete-modeによる補完を実行するadvice"
;       (unless (minibufferp)
;         (ac-start)))))

;(add-hook 'skk-mode-hook 
;          (lambda () 
;            "skk-kakuteiのadviceを活性化" 
;            (interactive)
;            (ad-activate 'skk-kakutei)))

;(defadvice skk-mode-exit (before ad-skk-mode-exit last)
;       "skk-modeから抜ける時にskk-kakuteiのadviceを不活性化。"
;       (ad-deactivate 'skk-kakutei))


;;----------------------------------------------------------------
;; #yasnippet
;;
(require 'cl)
;; 問い合わせを簡略化 yes/no を y/n
(fset 'yes-or-no-p 'y-or-n-p)

;; yasnippetを置いているフォルダにパスを通す
;(add-to-list 'load-path
;	     (expand-file-name "~/.emacs.d/site-lisp/yasnippet"))
(require 'yasnippet)
;; ~/.emacs.d/にsnippetsというフォルダを作っておきましょう
(setq yas-snippet-dirs
      '("~/.emacs.d/snippets" ;; 作成するスニペットはここに入る
	"~/.emacs.d/elpa/yasnippet/snippets" ;; 最初から入っていたスニペット(省略可能)
	))
(yas-global-mode 1)

;; 単語展開キーバインド (ver8.0から明記しないと機能しない)
;; (setqだとtermなどで干渉問題ありでした)
;; もちろんTAB以外でもOK 例えば "C-;"とか
(custom-set-variables '(yas-trigger-key "TAB"))

;; 既存スニペットを挿入する
(define-key yas-minor-mode-map (kbd "C-x i i") 'yas-insert-snippet)
;; 新規スニペットを作成するバッファを用意する
(define-key yas-minor-mode-map (kbd "C-x i n") 'yas-new-snippet)
;; 既存スニペットを閲覧・編集する
(define-key yas-minor-mode-map (kbd "C-x i v") 'yas-visit-snippet-file)

;;----------------------------------------------------------------
;; #dired-x
;;
(load "dired-x")
(add-hook 'dired-load-hook (lambda () (load "dired-x")))
;(add-hook 'dired-load-hook
;          (lambda ()
;            (load "dired-x")
;            (global-set-key "\C-x\C-j" 'skk-mode)
;            ))
(setq dired-guess-shell-alist-user
      '(("\\.png" "qlmanage -p")
	("\\.PNG" "qlmanage -p")
	("\\.mts" "qlmanage -p")
	("\\.MTS" "qlmanage -p")
        ("\\.jpg" "qlmanage -p")
        ("\\.JPG" "qlmanage -p")
        ("\\.pdf" "qlmanage -p")
        ("\\.PDF" "qlmanage -p")
        ("\\.dvi" "qlmanage -p")
;	("\\.dvi" "open")
	))

(eval-after-load "dired"
 '(progn
    (setq ls-lisp-dirs-first t)
    (setq dired-recursive-copies 'always)
    (setq dired-recursive-deletes 'always)
    (put 'dired-find-alternate-file 'disabled nil);新規バッファを作成しない
    ))

;これを設定しておくと、ウィンドウを分割して左右にdiredバッファを開いているとき、
;RやCのデフォルトの宛先がもう片方のディレクトリになります．
(setq dired-dwim-target t)

;(define-key dired-mode-map " " 'dired-do-shell-command)

;; http://kouzuka.blogspot.jp/2011/02/emacs-dired-quick-look.html
(defun my-quicklook-at-point ()
  "Preview a file at point with Quick Look."
  (interactive)
  (require 'ffap)
  (let ((url (ffap-url-at-point))
        (file (ffap-file-at-point))
        (process (get-process "qlmanage_ps")))
    (when url
      (if (string-match "\\`file://\\(.*\\)\\'" url)
          (setq file (match-string 1 url))
        (setq file nil)))
    (when (or (not (stringp file))
              (not (file-exists-p (setq file (expand-file-name file)))))
      (when process
        (kill-process process))
      (error "No file found"))
    (if process
        (kill-process process)
      (message "Quick Look: %s" file)
      (start-process "qlmanage_ps" nil "qlmanage" "-p" file))))

(global-set-key "\C-cy" 'my-quicklook-at-point)

(defun my-dired-do-quicklook ()
  "In dired, preview with Quick Look."
  (interactive)
  (let ((file (dired-get-filename))
        (process (get-process "qlmanage_ps")))
    (if process
        (kill-process process)
      (start-process "qlmanage_ps" nil "qlmanage" "-p" file))))

(eval-after-load "dired"
  '(define-key dired-mode-map " " 'my-dired-do-quicklook))


;;----------------------------------------------------------------
;; flymake
;;
;; (require 'flymake)

;; (add-hook 'c++-mode-hook
;;           '(lambda ()
;;              (flymake-mode t)))

;; GUIの警告は表示しない
; (setq flymake-gui-warnings-enabled nil)

;; 全てのファイルで flymakeを有効化
;(add-hook 'find-file-hook 'flymake-find-file-hook)

;; M-p/M-n で警告/エラー行の移動
;; (global-set-key "\M-p" 'flymake-goto-prev-error)
;; (global-set-key "\M-n" 'flymake-goto-next-error)

;; 警告エラー行の表示
;; (global-set-key "\C-cd" 'flymake-display-err-menu-for-current-line)


;;----------------------------------------------------------------
;; #flycheck
;;

(require 'flycheck)
(setq flycheck-check-syntax-automatically '(mode-enabled save))

(add-hook 'after-init-hook #'global-flycheck-mode)
;(add-hook 'python-mode-hook 'flycheck-mode)  ;; Python
;(add-hook 'ruby-mode-hook 'flycheck-mode)    ;; Ruby
;(add-hook 'yatex-mode-hook 'flycheck-mode)   ;; LaTeX

;;----------------------------------------------------------------
;; #flycheck-pos-tip
;; http://qiita.com/senda-akiha/items/cddb02cfdbc0c8c7bc2b
(eval-after-load 'flycheck
  '(custom-set-variables
   '(flycheck-display-errors-function #'flycheck-pos-tip-error-messages)))



;;----------------------------------------------------------------
;; #autoinsert
;;
(require 'autoinsert)

;; テンプレートのディレクトリ
(setq auto-insert-directory "~/.emacs.d/templates/")

;; 各ファイルによってテンプレートを切り替える
(setq auto-insert-alist
      (nconc '(
               ("\\.cpp$" . ["template.cpp" my-template])
               ("\\.h$"   . ["template.h" my-template])
	       ("\\.mdf$"   . ["template.mdf" my-template])
	       ("\\.tex$"   . ["template.tex" my-template])
	       ("\\.html$"   . ["template.html" my-template])
               ) auto-insert-alist))
(add-hook 'find-file-hooks 'auto-insert)
(require 'cl)

;; ここが腕の見せ所
(defvar template-replacements-alists
  '(("%file%"             . (lambda () (file-name-nondirectory (buffer-file-name))))
    ("%file-without-ext%" . (lambda () (file-name-sans-extension (file-name-nondirectory (buffer-file-name)))))
    ("%date%"             . (lambda () (concat (format-time-string "%Y/%m/%d (%a) %H:%M:%S") " JST by Takayuki Takaai")))
    ("%include-guard%"    . (lambda () (format "__SCHEME_%s__" (upcase (file-name-sans-extension (file-name-nondirectory buffer-file-name))))))))

(defun my-template ()
  (time-stamp)
  (mapc #'(lambda(c)
        (progn
          (goto-char (point-min))
          (replace-string (car c) (funcall (cdr c)) nil)))
    template-replacements-alists)
  (goto-char (point-max))
  (message "done."))
(add-hook 'find-file-not-found-hooks 'auto-insert)



;; 最終更新日の自動挿入
;; http://qiita.com/osada/items/3f2e586d120e0d6d778c
(require 'time-stamp)

;; 日本語で日付を入れたくないのでlocaleをCにする
(defun time-stamp-with-locale-c ()
  (let ((system-time-locale "C"))
    (time-stamp)
    nil))

;; time-stampの実行よりも前に定義しておく必要がある。
(if (not (memq 'time-stamp-with-locale-c write-file-hooks)) ;; 21.4 以降
    (add-hook 'write-file-hooks 'time-stamp-with-locale-c))  ;; 21.4
;; (if (not (memq 'time-stamp-with-locale-c write-file-hooks))    ;; 21.3 以前
;;     (setq write-file-hooks
;;           (cons 'time-stamp-with-locale-c write-file-hooks)))  ;; 21.3

(add-hook 'before-save-hook 'time-stamp)      ;; Emacs 21.4 以降
;; (if (not (memq 'time-stamp write-file-hooks))   ;; Emacs 21.3 以前
;;     (setq write-file-hooks                      ;; 21.3
;;           (cons 'time-stamp write-file-hooks))) ;; 21.3

(setq time-stamp-active t)
(setq time-stamp-start "[Ll]ast[ \-][Uu]pdated : ")
(setq time-stamp-format "%04y/%02m/%02d (%3a) %02H:%02M:%02S %Z by %U")
;(setq time-stamp-end ">")         ;; End of file
(setq time-stamp-end "$")   ;; Space or End of line
(setq time-stamp-line-limit 10)   ;; ファイルの先頭から10行以内を探す
;(setq time-stamp-line-limit -4) ;; ファイルの後ろから 4行以内を検索



;; (require 'time-stamp)
;; (add-hook 'before-save-hook 'time-stamp)
;; (setq time-stamp-active t)
;; (setq time-stamp-start "[lL]ast[ -][uU]pdated[ \t]*:[ \t]*<")
;; (setq time-stamp-format "%:y/%02m/%02d %02H:%02M:%02S from %s by %u")
;; (setq time-stamp-end ">")
;; (setq time-stamp-line-limit 20)

;; (if (not (memq 'time-stamp write-file-hooks))
;; (setq write-file-hooks
;; (cons 'time-stamp write-file-hooks)))

;; ;; 1) icalender.elの読み込み
;; (setq load-path (append (list (expand-file-name "~/.emacs.d/icalendar")) load-path))
;; (require 'icalendar)
;; ;----
;; ;; 2-1) google calender関連elispの読み込み
;; (setq load-path (append load-path (list (expand-file-name "~/.emacs.d/google"))))
;; (require 'google-calendar)
;; ;----
;; ;; 2-2) google calendarの設定
;; (setq google-calendar-user           "takoyaj")         ;;; GOOGLE USER
;; (setq google-calendar-code-directory "~/.emacs.d/google/code") ;;; PATH TO THEPYTHON CODE
;; (setq google-calendar-directory      "~/tmp")               ;;; TEMPORARY DIRECTORY
;; (setq google-calendar-url            "https://www.google.com/calendar/ical/uvl7n88702evof7jeu0fs3scv8%40group.calendar.google.com/public/basic.ics")  ;;; URL TO YOUR GOOGLE CALENDAR
;; (setq google-calendar-auto-update    t )                    ;;; DEFINE IF THE CALENDAR IS DOWNLOADED AFTER EVERY MODIFICATION




;;----------------------------------------------------------------
;; #twittering-mode
;;
;; twittering-mode読み込み
;(require 'twittering-mode)
;; 起動時パスワード認証 *要 gpgコマンド
;(setq twittering-use-master-password t)
;; パスワード暗号ファイル保存先変更 (デフォはホームディレクトリ)
;(setq twittering-private-info-file "~/.emacs.d/twittering-mode.gpg")
;; 表示する書式 区切り線いれたら見やすい
;(setq twittering-status-format "%i @%s %S %p: \n %T  [%@]%r %R %f%L\n -------------------------------------------")
;; アイコンを表示する
;(setq twittering-icon-mode t)
;; アイコンサイズを変更する *48以外を希望する場合 要 imagemagickコマンド
;(setq twittering-convert-fix-size 40)
;; 更新の頻度（秒）
;(setq twittering-timer-interval 40)
;; ツイート取得数
;(setq twittering-number-of-tweets-on-retrieval 50)
;; o で次のURLをブラウザでオープン
;(add-hook 'twittering-mode-hook
;	  (lambda ()
;	    (local-set-key (kbd "o")
;			   (lambda ()
;			     (interactive)
;			     (twittering-goto-next-uri)
;			     (execute-kbd-macro (kbd "C-m"))
;			     ))))
;; URL短縮サービス
;(setq twittering-tinyurl-service 'bit.ly)
;(setq twittering-bitly-login "o_2ckfv4s61s")
;(setq twittering-bitly-api-key "R_00276fc23e97b121ba01883f37a08287")
;; 実行キー追加 デフォルトは[f4]キー
;;(global-set-key (kbd "C-c t u") 'twittering-tinyurl-replace-at-point)


;;----------------------------------------------------------------
;; #dash-at-point
;;
;;  https://github.com/stanaka/dash-at-point 
;;
(autoload 'dash-at-point "dash-at-point"
          "Search the word at point with Dash." t nil)
(global-set-key "\C-cd" 'dash-at-point)
(global-set-key "\C-ce" 'dash-at-point-with-docset)
(add-to-list 'dash-at-point-mode-alist '(yatex-mode . "latex"))


;;----------------------------------------------------------------
;; #magit
;;
(require 'magit)


;;----------------------------------------------------------------
;; #uniqify
;;
(require 'uniquify)
;; set buffer name to 'filename<dir>'
(setq uniquify-buffer-name-style 'post-forward-angle-brackets)
;; *で囲まれたバッファ名は対象外にする
(setq uniquify-ignore-buffers-re "*[^*]+*")


;;----------------------------------------------------------------
;; #recentf
;;
;; preserv recent 2000 files
(setq recentf-max-saved-items 2000)
;; exclueded regular expression
(setq recentf-exclude '("/TAGS$" "/var/tmp/"))
(require 'recentf-ext)
(global-set-key "\C-xp" 'recentf-open-files)


;;----------------------------------------------------------------
;; #cua-mode
;;
(cua-mode t)
(setq cua-enable-cua-keys nil) ;; 変なキーバインド禁止


;;----------------------------------------------------------------
;; #sticky
;;
;(require 'sticky)
;(use-sticky-key ";" sticky-alist:en)


;;----------------------------------------------------------------
;; #php-auto-yasnippets
;;
;; (require 'php-auto-yasnippets)
;; (define-key php-mode-map (kbd "C-c C-y") 'yas/create-php-snippet)


;;----------------------------------------------------------------
;; #arduino-mode
;;
(setq auto-mode-alist (cons '("\\.\\(pde\\|ino\\)$" . arduino-mode) auto-mode-alist))
(autoload 'arduino-mode "arduino-mode" "Arduino editing mode." t)


;;----------------------------------------------------------------
;; #org-mode
;;
(require 'org-install)
(setq org-startup-truncated nil)
(setq org-return-follows-link t)
(add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
;; (org-remember-insinuate)
(setq org-directory "~/Dropbox/memo/")
(setq org-default-notes-file (concat org-directory "agenda.org"))
(setq org-capture-templates
      '(("t" "Todo" entry
         (file+headline nil "Inbox")
         "** TODO %?\n   %i\n   %a\n   %t")
        ("b" "Bug" entry
         (file+headline nil "Inbox")
         "** TODO %?   :bug:\n   %i\n   %a\n   %t")
        ("i" "Idea" entry
         (file+headline nil "New Ideas")
         "** %?\n   %i\n   %a\n   %t")))
 

;; ショートカットキー
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-co" 'org-capture)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
(global-set-key "\C-cr" 'org-remember)
 
(setq org-agenda-files (list org-directory)) ;agendaを使うため
(setq org-src-fontify-natively t) ;コード用のモードと同じ色でハイライト表示
(add-hook 'org-mode-hook 'turn-on-font-lock) ; org-modeでの強調表示を可能にする
;(setq org-hide-leading-stars t) ; 見出しの余分な*を消す
(setq org-directory "~/Dropbox/org/") ; org-default-notes-fileのディレクトリ
(setq org-default-notes-file "notes.org") ; org-default-notes-fileのファイル名


;;----------------------------------------------------------------
;; #dayone
;;
;; Day One のデータを配置している directory への path を格納します。必ずあなたの設定ファイルで設定して下さい。
(setq dayone-dir (concat (getenv "HOME") "/Dropbox/Apps/Day One/Journal.dayone/entries/"))
;; Day One のノートの XML で指定するタイムゾーンの値を格納します。
(setq dayone-timezone "Japan/Tokyo")


;;----------------------------------------------------------------
;; #google-maps
;;
;(require 'google-maps)


;;----------------------------------------------------------------
;; #scala-mode2
;;
(require 'scala-mode2)


;;----------------------------------------------------------------
;; #ENSIME
;;
(require 'ensime)
(add-hook 'scala-mode-hook 'ensime-scala-mode-hook)


;;----------------------------------------------------------------
;; #mew
;;
(autoload 'mew "mew" nil t)
(autoload 'mew-send "mew" nil t)
;(setq mew-fcc "+outbox") ; 送信メールを保存
 
;; Optional setup (Read Mail menu):
(setq read-mail-command 'mew)
 
;; Optional setup (e.g. C-xm for sending a message):
(autoload 'mew-user-agent-compose "mew" nil t)
(if (boundp 'mail-user-agent)
    (setq mail-user-agent 'mew-user-agent))
(if (fboundp 'define-mail-user-agent)
    (define-mail-user-agent
      'mew-user-agent
      'mew-user-agent-compose
      'mew-draft-send-message
      'mew-draft-kill
      'mew-send-hook))


;;----------------------------------------------------------------
;; #jabber
;;
(require 'jabber)
(setq  jabber-account-list 
(quote(("takoyaj@gmail.com" ;自分のアドレス
(:password . "qzfoaujvkttnjnti") ;アプリケーション固有パスワード
(:network-server . "talk.google.com")
(:connection-type . ssl)))))


;;----------------------------------------------------------------
;; #Edit with Emacs (Google Chrome Extension)
;;
(require 'edit-server)
(edit-server-start)
(setq edit-server-new-frame nil)


;;----------------------------------------------------------------
;; markdown-mode
;;
(autoload 'markdown-mode "markdown-mode"
  "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist '("\\.txt\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
(setq markdown-command "/usr/local/bin/multimarkdown")

(defun markdown-preview-file ()
  "run Marked on the current file and revert the buffer"
  (interactive)
  (shell-command 
;   (format "open -a /Applications/Marked\\ 2.app %s" 
   (format "open -a /Applications/MDEdit.app %s" 
       (shell-quote-argument (buffer-file-name))))
  )
(global-set-key "\C-cm" 'markdown-preview-file)


;;----------------------------------------------------------------
;; hippie-expand
;;
;;; hippie-expand
(global-set-key "\C-o" 'hippie-expand)
(setq hippie-expand-try-functions-list
      '(yas/hippie-try-expand
        try-expand-dabbrev
        try-expand-dabbrev-all-buffers
        try-expand-dabbrev-from-kill
        try-complete-file-name-partially
        try-complete-file-name
        try-expand-all-abbrevs
        try-expand-list try-expand-line
        try-complete-lisp-symbol-partially
        try-complete-lisp-symbol))


;;----------------------------------------------------------------
;; web mode
;;
(require 'web-mode)
;; (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
;; (add-to-list 'auto-mode-alist '("\\.tpl\\'" . web-mode))
;; (add-to-list 'auto-mode-alist '("\\.php\\'" . web-mode))
;; (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
;; (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
;; (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
;; (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
;; (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
;; (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))

(add-to-list 'auto-mode-alist '("\\.phtml$"     . web-mode))
(add-to-list 'auto-mode-alist '("\\.tpl\\.php$" . web-mode))
(add-to-list 'auto-mode-alist '("\\.jsp$"       . web-mode))
(add-to-list 'auto-mode-alist '("\\.as[cp]x$"   . web-mode))
(add-to-list 'auto-mode-alist '("\\.erb$"       . web-mode))
(add-to-list 'auto-mode-alist '("\\.html?$"     . web-mode))

(defun web-mode-hook ()
  "Hooks for Web mode."
  (setq web-mode-html-offset   2)
  (setq web-mode-css-offset    2)
  (setq web-mode-script-offset 2)
  (setq web-mode-php-offset    2)
  (setq web-mode-java-offset   2)
  (setq web-mode-asp-offset    2)
  (setq indent-tabs-mode t)
  (setq tab-width 2))
(add-hook 'web-mode-hook 'web-mode-hook)


;;----------------------------------------------------------------
;; key-chord
;;
(require 'key-chord)
(setq key-chord-two-keys-delay 0.04)
(key-chord-mode 1)
;;同時押しでview-modeをトグル
(key-chord-define-global "jk" 'view-mode)


;;----------------------------------------------------------------
;; undo-tree
;;
(require 'undo-tree)
(global-undo-tree-mode t)
(global-set-key (kbd "M-/") 'undo-tree-redo)



;;----------------------------------------------------------------
;; nav
;;
;; (require 'nav)
;; (setq nav-split-window-direction 'vertical) ;; 分割したフレームを垂直に並べる
;; (global-set-key "\C-x\C-d" 'nav-toggle)     ;; C-x C-d で nav をトグル

;; (nav-disable-overeager-window-splitting)
;; (custom-set-variables
;;  '(nav-width 12))
;;  
;; (defun nav-mode-hl-hook ()
;;   (local-set-key (kbd "<right>") 'nav-open-file-under-cursor)
;;   (local-set-key (kbd "<left>")  'nav-go-up-one-dir)
;;   )
;;  
;; (add-hook 'nav-mode-hook 'nav-mode-hl-hook)
;; (add-hook 'emacs-startup-hook
;;           (lambda ()
;;             (nav-toggle-hidden-files)
;;             ))


;;----------------------------------------------------------------
;; ag
;;
;; $ brew install the_silver_searcher とか
;
(require 'ag)
(custom-set-variables
 '(ag-highlight-search t)  ; 検索結果の中の検索語をハイライトする
 '(ag-reuse-window 'nil)   ; 現在のウィンドウを検索結果表示に使う
 '(ag-reuse-buffers 'nil)) ; 現在のバッファを検索結果表示に使う
(require 'wgrep-ag)
(autoload 'wgrep-ag-setup "wgrep-ag")
(add-hook 'ag-mode-hook 'wgrep-ag-setup)
;; agの検索結果バッファで"r"で編集モードに。
;; C-x C-sで保存して終了、C-x C-kで保存せずに終了
(define-key ag-mode-map (kbd "r") 'wgrep-change-to-wgrep-mode)
;; キーバインドを適当につけておくと便利。"\C-xg"とか
;(global-set-key [(hyper m)] 'ag)
(global-set-key "\C-xg" 'ag)
;; ag開いたらagのバッファに移動するには以下をつかう
(defun my/filter (condp lst)
  (delq nil
        (mapcar (lambda (x) (and (funcall condp x) x)) lst)))
(defun my/get-buffer-window-list-regexp (regexp)
  "Return list of windows whose buffer name matches regexp."
  (my/filter #'(lambda (window)
              (string-match regexp
               (buffer-name (window-buffer window))))
          (window-list)))
(global-set-key [(super m)]
                #'(lambda ()
                    (interactive)
                    (call-interactively 'ag)
                    (select-window ; select ag buffer
                     (car (my/get-buffer-window-list-regexp "^\\*ag ")))))


;;----------------------------------------------------------------
;; popwin
;; http://d.hatena.ne.jp/m2ym/20110120/1295524932
;;
(require 'popwin)
(setq display-buffer-function 'popwin:display-buffer)
(setq popwin:popup-window-position 'bottom)
(push '("*YaTeX-typesetting*") popwin:special-display-config)
(push '("helm" :regexp t :height 0.4) popwin:special-display-config)

;;----------------------------------------------------------------
;; js2-mode
;;
;(autoload 'js2-mode "js2" nil t)
(autoload 'js2-mode "js2-mode" nil t)
(add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))

(add-hook 'js2-mode-hook
          (lambda ()
            (tern-mode t)))
 
(eval-after-load 'tern
   '(progn
      (require 'tern-auto-complete)
      (tern-ac-setup)))

;(add-hook 'js-mode-hook 'js2-minor-mode)
(add-hook 'js2-mode-hook 'ac-js2-mode)

;;----------------------------------------------------------------
;; # jade-mode
;;
(require 'sws-mode)
(require 'jade-mode)

(add-to-list 'auto-mode-alist '("\.jade$" . jade-mode))

;;----------------------------------------------------------------
;; haskell-mode
;;
(require 'haskell-mode)
(require 'haskell-cabal)

(add-hook 'haskell-mode-hook 'turn-on-haskell-indentation)

(add-to-list 'auto-mode-alist '("\\.hs$" . haskell-mode))
(add-to-list 'auto-mode-alist '("\\.lhs$" . literate-haskell-mode))
(add-to-list 'auto-mode-alist '("\\.cabal\\'" . haskell-cabal-mode))

;; ghc-mod
(add-to-list 'exec-path (concat (getenv "HOME") "/.cabal/bin"))
(add-to-list 'load-path "~/.cabal/share/x86_64-osx-ghc-7.8.3/ghc-mod-5.2.1.1")
(autoload 'ghc-init "ghc")
(ghc-init)
(add-to-list 'ac-sources 'ac-source-ghc-mod)

(add-hook 'haskell-mode-hook (lambda () (ghc-init) (flymake-mode)))


;;----------------------------------------------------------------
;; pdf-tools
;; "The epdfinfo server quit, restart it?" と言われて機能せず

;(pdf-tools-install)

;(require 'pdf-tools)
;(require 'pdf-annot) 
;(require 'pdf-history) 
;(require 'pdf-info) 
;(require 'pdf-isearch) 
;(require 'pdf-links) 
;(require 'pdf-misc) 
;(require 'pdf-occur) 
;(require 'pdf-outline) 
;(require 'pdf-render) 
;(require 'pdf-sync) 
;(require 'tablist-filter)
;(require 'tablist)


;; ;;----------------------------------------------------------------
;; ;; direx
;; ;; http://cx4a.blogspot.jp/2011/12/popwineldirexel.html
;; ;;
;; (require 'direx)

;; ;; direx:direx-modeのバッファをウィンドウ左辺に幅25でポップアップ
;; ;; :dedicatedにtを指定することで、direxウィンドウ内でのバッファの切り替えが
;; ;; ポップアップ前のウィンドウに移譲される
;; (push '(direx:direx-mode :position left :width 25 :dedicated t)
;;       popwin:special-display-config)

;; ;(global-set-key (kbd "C-x C-j") 'direx:jump-to-directory)
;; (global-set-key (kbd "C-x C-j") 'direx:jump-to-directory-other-window)

;;----------------------------------------------------------------
;; direx-grep
;; https://github.com/aki2o/direx-grep/blob/master/README.md
;; 不安定で使用中止中
;; (require 'direx-grep)
;; (define-key direx:direx-mode-map (kbd "s") 'direx-grep:grep-item)
;; (define-key direx:direx-mode-map (kbd "S") 'direx-grep:grep-item-from-root)
;; (define-key direx:direx-mode-map (kbd "a") 'direx-grep:show-all-item-at-point)
;; (define-key direx:direx-mode-map (kbd "A") 'direx-grep:show-all-item)




;;----------------------------------------------------------------
;; dired の fキーで、指定した拡張子のファイルを OS で直接開く
;; http://www49.atwiki.jp/ntemacs/pages/19.html
;;

;; OSタイプ を調べる function
(defun os-type ()
  (let ((os-type (shell-command-to-string "uname")))
    (cond ((string-match "CYGWIN" os-type)
           "win")
          ((string-match "Linux" os-type)
           "linux")
          ((string-match "Darwin" os-type)
           "mac"))))

;; OS でファイル、ディレクトリ、URL を直接開くためのコマンドを決定する function
(defun os-open-command-name ()
  (let ((os-type (os-type)))
    (if os-type
        (let ((command-name-list
               (cond ((string= "win" os-type)
                      '("cygstart"))
                     ((string= "linux" os-type)
                      '("xdg-open" "gnome-open"))
                     ((string= "mac" os-type)
                      '("open")))))
          (catch 'loop
            (dolist (command-name command-name-list)
              (unless (string=  (shell-command-to-string
                                 (concat "which " command-name " 2> /dev/null"))
                                "")
                (throw 'loop command-name))))))))

;; OS で直接、ファイル、ディレクトリ、URL を開く command
(defun os-open-command (filename)
  (interactive)
  (let* ((default-directory (if (file-regular-p filename)
                                (file-name-directory filename)
                              default-directory))
         (localname (if (file-remote-p filename)
                        (tramp-file-name-localname
                         (tramp-dissect-file-name filename))
                      filename))
         (os-open-command-name (os-open-command-name)))
    (when os-open-command-name
      (cond ((and (string= os-open-command-name "xdg-open")
                  (not (file-remote-p default-directory)))
             ;; 以下の URL の対策を行う
             ;; http://d.hatena.ne.jp/mooz/20100915/p1
             ;; http://i-yt.info/?date=20090829#p01
             (let (process-connection-type)
               (start-process "os-open-command" nil os-open-command-name localname)))
            (t
             ;; リモートでもコマンドを実行できるように、start-process ではなく shell-command系を使う
             (shell-command-to-string (concat os-open-command-name " "
                                              (shell-quote-argument localname) " &"))))
      (message "%s" (concat os-open-command-name " " localname)))))


;; ;; dired で W 押下時に、カーソル位置のファイルを OS で直接起動する
;; (define-key dired-mode-map (kbd "W")
;;   (lambda ()
;;     (interactive)
;;     (os-open-command (dired-get-filename nil t))))

;; ;; dired で E 押下時に、開いているディレクトリを OS で直接開く
;; (define-key dired-mode-map (kbd "E")
;;   (lambda ()
;;     (interactive)
;;     (os-open-command (dired-current-directory))))


(require 'recentf)
(recentf-mode 1)
;;アイドルタイマーを利用して .recentf ファイルを自動的に保存する。
;; http://d.hatena.ne.jp/tomoya/20110217/1297928222
(when (require 'recentf nil t)
  (setq recentf-max-saved-items 2000)
  (setq recentf-exclude '(".recentf"))
  (setq recentf-auto-cleanup 10)
  (setq recentf-auto-save-timer
        (run-with-idle-timer 30 t 'recentf-save-list))
  (recentf-mode 1))

;; OS で起動したいファイルの拡張子一覧
(setq os-open-file-suffixes '("doc" "docx"
                              "xls" "xlsx"
                              "ppt" "pptx"
                              "mdb" "mdbx"
                              "vsd" "vdx" "vsdx"
                              "mpp"
                              "pdf"
                              "bmp" "jpg"
                              "odt" "ott"
                              "odg" "otg"
                              "odp" "otp"
                              "ods" "ots"
                              "odf"
                              "wtp"
                              ))

;; OS で直接開きたいファイルかどうかを判定する述語 function
(defun os-open-file-p (file)
  (if (file-regular-p file)
      (let ((ext (file-name-extension file)))
        (if (and ext
                 (member (downcase ext) os-open-file-suffixes)
                 (os-open-command-name))
            t))))

;; dired でファイルを f で開く際に、os-open-file-suffixes リストに指定してあるサフィックスのファイルは、
;; OS で直接起動する
(defadvice find-file (around ad-find-file-os-open-command-setup activate)
  (let ((file (ad-get-arg 0)))
    (cond ((os-open-file-p file)
           (recentf-push file) ; recentf に追加する
           (os-open-command file))
          (t
           ad-do-it))))


;;----------------------------------------------------------------
;; # dired-subtree
;;http://rubikitch.com/2014/12/22/dired-subtree/
(require 'dired-subtree)
;;; iを置き換え
(define-key dired-mode-map (kbd "i") 'dired-subtree-insert)
;;; org-modeのようにTABで折り畳む
(define-key dired-mode-map (kbd "<tab>") 'dired-subtree-remove)
;;; C-x n nでsubtreeにナローイング
(define-key dired-mode-map (kbd "C-x n n") 'dired-subtree-narrow)


;;----------------------------------------------------------------
;; #ruby-mode
;; http://blog.10rane.com/2014/09/01/set-up-ruby-mode-of-emacs/
;;
(autoload 'ruby-mode "ruby-mode"
  "Mode for editing ruby source files" t)
(add-to-list 'auto-mode-alist '("\\.rb$" . ruby-mode))
(add-to-list 'auto-mode-alist '("Capfile$" . ruby-mode))
(add-to-list 'auto-mode-alist '("Gemfile$" . ruby-mode))
(add-to-list 'interpreter-mode-alist '("ruby" . ruby-mode)) ;; shebangがrubyの場合、ruby-modeを開く

;; ruby-modeのインデントを改良する
(setq ruby-deep-indent-paren-style nil)
(defadvice ruby-indent-line (after unindent-closing-paren activate)
  (let ((column (current-column))
        indent offset)
    (save-excursion
      (back-to-indentation)
      (let ((state (syntax-ppss)))
        (setq offset (- column (current-column)))
        (when (and (eq (char-after) ?\))
                   (not (zerop (car state))))
          (goto-char (cadr state))
          (setq indent (current-indentation)))))
    (when indent
      (indent-line-to indent)
      (when (> offset 0) (forward-char offset)))))

;;----------------------------------------------------------------
;; ruby-end
;; endや括弧などを自動挿入する
;; http://blog.livedoor.jp/ooboofo3/archives/53748087.html
;;
(require 'ruby-end)
(add-hook 'ruby-mode-hook
  '(lambda ()
    (abbrev-mode 1)
    (electric-pair-mode t)
    (electric-indent-mode t)
    (electric-layout-mode t)))

;;----------------------------------------------------------------
;; ruby-block
;; endにカーソルを合わせると、そのendに対応する行をハイライトする
;;
(require 'ruby-block)
(ruby-block-mode t)
(setq ruby-block-highlight-toggle t)

;;----------------------------------------------------------------
;; robe
;; http://codeout.hatenablog.com/entry/2014/02/04/210237
;;
(add-hook 'ruby-mode-hook 'robe-mode)
(autoload 'robe-mode "robe" "Code navigation, documentation lookup and completion for Ruby" t nil)
(autoload 'ac-robe-setup "ac-robe" "auto-complete robe" nil nil)
(add-hook 'robe-mode-hook 'ac-robe-setup)

;;----------------------------------------------------------------
;; rcodetools
;;
(require 'rcodetools)
(define-key ruby-mode-map (kbd "C-c C-d") 'xmp)

;;----------------------------------------------------------------
;; smart-compile
;; http://ka-zoo.net/2013/03/smartcompile-emacs%E3%81%8B%E3%82%89ruby%E3%82%92%E7%9B%B4%E6%8E%A5%E5%AE%9F%E8%A1%8C/
;; in smart-compile.el
;; ("\\.pl\\'"         . "perl -cw %f")
;; ;;  ("\\.rb\\'"         . "ruby -cw %f")
;; ("\\.rb\\'"         . "ruby %f")
(require 'smart-compile)
(define-key ruby-mode-map (kbd "C-c c") 'smart-compile)
(define-key ruby-mode-map (kbd "C-c C-c") (kbd "C-c c C-m"))
(setq compilation-window-height 15) ;; default window height is 15





;;----------------------------------------------------------------
;; # key-combo
;;
(require 'key-combo)
(key-combo-mode 1)
(add-hook 'yatex-mode-hook
  '(lambda ()
     (key-combo-mode t)))

(add-hook 'js2-mode-hook
  '(lambda ()
     (key-combo-mode t)))

(add-hook 'ruby-mode-hook
  '(lambda ()
     (key-combo-mode t)))

(add-hook 'python-mode-hook
  '(lambda ()
     (key-combo-mode t)))

(add-hook 'php-mode-hook
  '(lambda ()
     (key-combo-mode t)))

;; (add-hook 'skk-latin-mode-hook
;;   '(lambda ()
;;      (key-combo-mode t)))


;;; 各モードに対するキー設定
(setq key-combo-lisp-mode-hooks
      '(lisp-mode-hook
        emacs-lisp-mode-hook
        lisp-interaction-mode-hook
        inferior-gauche-mode-hook
        scheme-mode-hook))

(setq key-combo-lisp-default
      '(("."  . " . ")
        (","  . (key-combo-execute-orignal))
        (",@" . " ,@")
        (";"  . (";;;; " ";"))
        ("="  . ("= " "eq " "equal "))
        (">=" . ">= ")))

(setq key-combo-common-mode-hooks
      '(c-mode-common-hook
        php-mode-hook
        ruby-mode-hook
        python-mode-hook
;	robe-mode-hook
        cperl-mode-hook
;        js2-mode-hook
	))

(setq key-combo-common-default
      '((","  . (", " ","))
        ("="  . (" = " " == " " === " "="))
        ("=>" . " => ")
        ("=~" . " =~ ")
        ("=*" . " =* ")
        ("+"  . (" + " " += " "+"))
        ("+=" . " += ")
        ("-"  . (" - " " -= " "-"))
        ("-=" . " -= ")
        ("->" . " -> ")
        (">"  . (" > " " => " " >= " ">"))
        (">=" . " >= ")
        ("%"  . (" % " " %= " "%"))
        ("%="  . " %= ")
        ("!" . (" != " " !~ " "!"))
        ("!="  . " != " )
        ("!~" . " !~ ")
        ("~" . (" =~ " "~"))
        ("::" . " :: ")
        ("&"  . (" & " " && " "&"))
        ("&=" . " &= ")
        ("&&=" . " &&= ")
        ("*"  . (" * " "**" "*"))
        ("*="  . " *= " )
        ("<" . (" < " " <= " "<"))
        ("<=" . " <= ")
        ("<<=" . " <<= ")
        ("<-" . " <- ")
        ("|"  . (" ||= " " || " "|"))
        ("|=" . " |= ")
        ("||=" . " ||= ")
        ("/" . ("/`!!'/" " / " "// "))
        ("/=" . " /= ")
        ("/*" . "/* `!!' */")
        ("{" . ("{`!!'}" "{"))
        ("{|" . "{ |`!!'|  }")
        ("\"" . ("\"`!!'\"" "\""))
        ("'" . ("'`!!''" "'"))
        ("(" . ("(`!!')" "("))))

(setq key-combo-js-mode-hooks
      '(js2-mode-hook
	))

(setq key-combo-js-default
      '((","  . (", " ","))
        ("="  . (" = " " == " " === " "="))
        ("=>" . " => ")
        ("=~" . " =~ ")
        ("=*" . " =* ")
        ("+"  . (" + " "++" "+"))
        ("+=" . " += ")
        ("-"  . (" - " "--" "-"))
        ("-=" . " -= ")
        ("->" . " -> ")
        (">"  . (" > " " => " " >= " ">"))
        (">=" . " >= ")
        ("%"  . (" % " " %= " "%"))
        ("%="  . " %= ")
        ("!" . (" != " " !~ " "!"))
        ("!="  . " != " )
        ("!~" . " !~ ")
        ("~" . (" =~ " "~"))
        ("::" . " :: ")
        ("&"  . (" & " " && " "&"))
        ("&=" . " &= ")
        ("&&=" . " &&= ")
        ("*"  . (" * " "**" "*"))
        ("*="  . " *= " )
        ("<" . (" < " " <= " "<"))
        ("<=" . " <= ")
        ("<<=" . " <<= ")
        ("<-" . " <- ")
        ("|"  . (" ||= " " || " "|"))
        ("|=" . " |= ")
        ("||=" . " ||= ")
        ("/" . ("/`!!'/" " / " "// "))
        ("/=" . " /= ")
        ("/*" . "/* `!!' */")
        ("{" . ("{`!!'}" "{"))
        ("{|" . "{ |`!!'|  }")
        ("\"" . ("\"`!!'\"" "\""))
        ("'" . ("'`!!''" "'"))
        ("(" . ("(`!!')" "("))))


(setq key-combo-yatex-mode-hooks
      '(yatex-mode-hook
 	))

(setq key-combo-yatex-default
      '(("," . ",\\ ")
	("=" . " = ")
	(">" . " > ")
	("<" . " < ")
      ("+" . " + ")
      ("-" . " - ")))


(key-combo-define-hook key-combo-common-mode-hooks
                       'key-combo-common-load-default
                       key-combo-common-default)
(key-combo-define-hook key-combo-js-mode-hooks
                       'key-combo-js-load-default
                       key-combo-js-default)
(key-combo-define-hook key-combo-lisp-mode-hooks
                       'key-combo-lisp-load-default
                       key-combo-lisp-default)
(key-combo-define-hook key-combo-yatex-mode-hooks
                       'key-combo-yatex-load-default
                       key-combo-yatex-default)




;; ;;----------------------------------------------------------------
;; ;; # el-screen
;; ;; http://rubikitch.com/2014/09/05/elscreen/
;; ;;
;; ;;; プレフィクスキーはC-z
;; (setq elscreen-prefix-key (kbd "C-z"))
;; (elscreen-start)
;; ;;; タブの先頭に[X]を表示しない
;; (setq elscreen-tab-display-kill-screen nil)
;; ;;; header-lineの先頭に[<->]を表示しない
;; (setq elscreen-tab-display-control nil)
;; ;;; バッファ名・モード名からタブに表示させる内容を決定する(デフォルト設定)
;; (setq elscreen-buffer-to-nickname-alist
;;       '(("^dired-mode$" .
;;          (lambda ()
;;            (format "Dired(%s)" dired-directory)))
;;         ("^Info-mode$" .
;;          (lambda ()
;;            (format "Info(%s)" (file-name-nondirectory Info-current-file))))
;;         ("^mew-draft-mode$" .
;;          (lambda ()
;;            (format "Mew(%s)" (buffer-name (current-buffer)))))
;;         ("^mew-" . "Mew")
;;         ("^irchat-" . "IRChat")
;;         ("^liece-" . "Liece")
;;         ("^lookup-" . "Lookup")))
;; (setq elscreen-mode-to-nickname-alist
;;       '(("[Ss]hell" . "shell")
;;         ("compilation" . "compile")
;;         ("-telnet" . "telnet")
;;         ("dict" . "OnlineDict")
;;         ("*WL:Message*" . "Wanderlust")))

;; ;; http://nishikawasasaki.hatenablog.com/entry/20110313/1300031344
;; (if window-system
;;     (define-key elscreen-map "\C-z" 'iconify-or-deiconify-frame)
;;   (define-key elscreen-map "\C-z" 'suspend-emacs))

;; ;; 以下は自動でスクリーンを生成する場合の設定
;; (defmacro elscreen-create-automatically (ad-do-it)
;;   `(if (not (elscreen-one-screen-p))
;;        ,ad-do-it
;;      (elscreen-create)
;;      (elscreen-notify-screen-modification 'force-immediately)
;;      (elscreen-message "New screen is automatically created")))

;; (defadvice elscreen-next (around elscreen-create-automatically activate)
;;   (elscreen-create-automatically ad-do-it))

;; (defadvice elscreen-previous (around elscreen-create-automatically activate)
;;   (elscreen-create-automatically ad-do-it))

;; (defadvice elscreen-toggle (around elscreen-create-automatically activate)
;;   (elscreen-create-automatically ad-do-it))
     
;; (setq elscreen-display-tab 10) ; タブの幅（６以上じゃないとダメ）
;; (setq elscreen-tab-display-kill-screen nil) ; タブの左端の×を非表示

;; (global-set-key (kbd "C-z C-c") 'elscreen-clone) ; 今のウインドウを基に作成
;; (global-set-key (kbd "C-z C-k") 'elscreen-kill-screen-and-buffers) ; スクリーンとバッファをkill
;; (global-set-key [(C-tab)] 'elscreen-next) ; ブラウザみたいに
;; (global-set-key [(C-S-tab)] 'elscreen-previous) ; ブラウザみたいに　その2

;; ;; elscreen-server
;; (require 'elscreen-server)

;; ;; elscreen-color-theme
;; (require 'elscreen-color-theme)

;; ;; (custom-set-faces
;; ;;  '(elscreen-tab-control-face ((T (:background "color-234" :foreground "brightwhite" :underline t))))
;; ;;  '(elscreen-tab-current-screen-face ((t (:background "color-243" :foreground "brightwhite"))))
;; ;;  '(elscreen-tab-other-screen-face ((t (:background "color-235" :foreground "brightwhite" :underline t)))))

;; (custom-set-faces
;;  '(elscreen-tab-background-face
;;    ((t (:background "gray10"))))
;;  '(elscreen-tab-control-face
;;    ((t (:background "gray10" :foreground "gray60"))))
;;  '(elscreen-tab-current-screen-face
;;    ((t (:background "gray75" :foreground "black"))))
;;  '(elscreen-tab-other-screen-face
;;    ((t (:background "gray30" :foreground "gray80"))))
;; )

;; ;;;
;; ;;; elscreen のタブの並びと数字キーの並びを合わせる
;; ;;; http://d.hatena.ne.jp/ken_m/20110607/1307451681

;; ;; 既存スクリーンのリストを要求された際、0 番が存在しているかのように偽装する
;; (defadvice elscreen-get-screen-list (after my-ad-elscreen-get-screenlist disable)
;;   (add-to-list 'ad-return-value 0))

;; ;; スクリーン生成時に 0 番が作られないようにする
;; (defadvice elscreen-create (around my-ad-elscreen-create activate)
;;   (interactive)
;;   ;; 0 番が存在しているかのように偽装
;;   (ad-enable-advice 'elscreen-get-screen-list 'after 'my-ad-elscreen-get-screenlist)
;;   (ad-activate 'elscreen-get-screen-list)
;;   ;; 新規スクリーン生成
;;   ad-do-it
;;   ;; 偽装解除
;;   (ad-disable-advice 'elscreen-get-screen-list 'after 'my-ad-elscreen-get-screenlist)
;;   (ad-activate 'elscreen-get-screen-list))

;; ;; スクリーン 1 番を作成し 0 番を削除 (起動時、フレーム生成時用)
;; (defun my-elscreen-kill-0 ()
;;   (when (and (elscreen-one-screen-p)
;;              (elscreen-screen-live-p 0))
;;     (elscreen-create)
;;     (elscreen-kill 0)))

;; ;; フレーム生成時のスクリーン番号が 1 番になるように
;; (defadvice elscreen-make-frame-confs (after my-ad-elscreen-make-frame-confs activate)
;;   (let ((selected-frame (selected-frame)))
;;     (select-frame frame)
;;     (my-elscreen-kill-0)
;;     (select-frame selected-frame)))

;; ;; 起動直後のスクリーン番号が 1 番になるように
;; (add-hook 'after-init-hook 'my-elscreen-kill-0)

;; ;; M-0 ～ M-9 で指定番号のスクリーンに切り替え
;; (let ((i 0))
;;   (while (<= i 9)
;;     (define-key esc-map (number-to-string i)
;;                         `(lambda () (interactive) (elscreen-goto ,i)))
;;     (setq i (1+ i))))

;; ;; screenの順番を手軽に変更
;; ;; http://qiita.com/fujimisakari/items/d7f1b904de11dcb018c3

;; (defun elscreen-swap-previous()
;;   "Interchange screens selected currently and previous."
;;   (interactive)
;;   (cond
;;    ((elscreen-one-screen-p)
;;     (elscreen-message "There is only one screen, cannot swap"))
;;    (t
;;     (let* ((screen-list (sort (elscreen-get-screen-list) '>))
;;            (previous-screen
;;             (or (nth 1 (memq (elscreen-get-current-screen) screen-list))
;;                (car screen-list)))
;;            (current-screen (elscreen-get-current-screen))
;;            (current-screen-property
;;             (elscreen-get-screen-property current-screen))
;;            (previous-screen-property
;;             (elscreen-get-screen-property previous-screen)))
;;       (elscreen-set-screen-property current-screen previous-screen-property)
;;       (elscreen-set-screen-property previous-screen current-screen-property)
;;       (elscreen-goto-internal (elscreen-get-current-screen)))))
;;   (elscreen-previous))

;; (defun elscreen-swap-next()
;;   "Interchange screens selected currently and next."
;;   (interactive)
;;   (cond
;;    ((elscreen-one-screen-p)
;;     (elscreen-message "There is only one screen, cannot swap"))
;;    (t
;;     (let* ((screen-list (sort (elscreen-get-screen-list) '<))
;;            (next-screen
;;             (or (nth 1 (memq (elscreen-get-current-screen) screen-list))
;;                (car screen-list)))
;;            (current-screen (elscreen-get-current-screen))
;;            (current-screen-property
;;             (elscreen-get-screen-property current-screen))
;;            (next-screen-property
;;             (elscreen-get-screen-property next-screen)))
;;       (elscreen-set-screen-property current-screen next-screen-property)
;;       (elscreen-set-screen-property next-screen current-screen-property)
;;       (elscreen-goto-internal (elscreen-get-current-screen)))))
;;      (elscreen-next))

;; (global-set-key (kbd "C-M-<right>") 'elscreen-swap-next)           ; screenの配置位置ずらし(右)
;; (global-set-key (kbd "C-M-<left>") 'elscreen-swap-previous)        ; screen配置位置ずらし(左)

;; ;; elscreen-dired
;; (require 'elscreen-dired)


;;----------------------------------------------------------------
;; # guide-key
;; http://www.kaichan.info/blog/2012-12-03-emacs-advent-calendar-2012-03.html

(require 'guide-key)
(setq guide-key/guide-key-sequence '("C-x r" "C-x 4" "C-c" "C-z"))
(guide-key-mode 1)  ; guide-key-mode を有効にする


;;----------------------------------------------------------------
;; # eldoc
;;
(add-hook 'emacs-lisp-mode-hook '(lambda ()
				   (require 'eldoc-extension)
				   (eldoc-mode t)
				   ))
(add-hook 'eval-expression-minibuffer-setup-hook 'eldoc-mode)

;;----------------------------------------------------------------
;; # php-eldoc
;; https://github.com/sabof/php-eldoc
;; (defun php-mode-options ()
;;   (php-eldoc-enable)
;;   (cond
;;     ((string-match-p "^/my-project-folder")
;;      (php-eldoc-probe-load "http://my-project.com/probe.php?secret=sesame"))
;;     ((string-match-p "^/other-project-folder")
;;      (php-eldoc-probe-load "http://localhost/otherproject/probe.php?secret=sesame"))))
;; (add-hook 'php-mode-hook 'php-mode-options)


;;----------------------------------------------------------------
;; # jumar (https://github.com/kenoss/jumar) 
;; http://qiita.com/kenoss/items/0617b0c2f04343d4477c
(require 'jumar)
(require 'jumar-dwin)
(require 'helm)  ; if you use visualizer.

;; If one needs highlight the line after jump.
(require 'erfi-emacs)
(add-hook 'jumar-post-jump-hook 'erfi-emacs-hl-turn-on-until-next-command)

;; Initialization
(jumar-dwin-use-preconfigured-scheme 'list+history)
(jumar-init)

;; As you like.
(define-key global-map (kbd "C-'")     'jumar-dwin-add-marker)
(define-key global-map (kbd "C-\"")    'jumar-dwin-jump-current)
(define-key global-map (kbd "C-,")     'jumar-dwin-jump-backward)
(define-key global-map (kbd "C-.")     'jumar-dwin-jump-forward)
(define-key global-map (kbd "C-x C-'") 'helm-jumar-dwin-jumarkers)

;; As you need.  Advise jump commands, like `find-tag' and `gtags-find-tag',
;; to add jumarker before/after jump.
(jumar-dwin-advise-jump-command-to-add-jumarker 'find-tag)
; (jumar-dwin-advise-jump-command-to-add-jumarker 'elisp-slime-nav-find-elisp-thing-at-point)


;;----------------------------------------------------------------	
;; # sticky shift
;;
(require 'sticky)
(use-sticky-key ?\; sticky-alist:en)


;;----------------------------------------------------------------
;; expand region
;; er/expand-regionを実行する度にリージョンの範囲が広がっていく
;; http://d.hatena.ne.jp/syohex/20120117/1326814127
(require 'expand-region)
(global-set-key (kbd "C-\`") 'er/expand-region)
(global-set-key (kbd "C-M-\`") 'er/contract-region) ;; リージョンを狭める

;; transient-mark-modeが nilでは動作しませんので注意
(transient-mark-mode t)


;;----------------------------------------------------------------
;; EmacsからDictionary.appを起動する方法Add Star
;; http://d.hatena.ne.jp/tunefs/20130212/p1
;;
(global-set-key
 "\C-\M-d" 
 (lambda ()
   (interactive)
   (let ((url (concat "dict://" (read-from-minibuffer "" (current-word)))))
     (browse-url url))))


;;----------------------------------------------------------------
;; moz
;; https://github.com/RenWenshan/emacs-moz-controller
(require 'moz-controller)
(global-set-key (kbd "M-<up>") 'moz-controller-page-up)
(global-set-key (kbd "M-<down>") 'moz-controller-page-down)
(global-set-key (kbd "M-<left>") 'moz-controller-tab-previous)
(global-set-key (kbd "M-<right>") 'moz-controller-tab-next)
(global-set-key (kbd "M-=") 'moz-controller-zoom-in)
(global-set-key (kbd "M--") 'moz-controller-zoom-out)
(global-set-key (kbd "M-0") 'moz-controller-zoom-reset)
(global-set-key (kbd "M-<backspace>") 'moz-controller-tab-close)
(global-set-key (kbd "M-\\") 'moz-controller-get-current-url) ;;動かず

;;----------------------------------------------------------------
;; googl.el
;;
;(load "google")


;;----------------------------------------------------------------
;; search-web
;; http://qiita.com/akisute3@github/items/8deb54b75b48e8b04cb0
;;(require 'search-web)

(defvar search-engines
  '(("s" . "http://reference.sitepoint.com/search?q=%s")
	("g" . "http://www.google.com/search?q=%s")
	("gj" . "http://www.google.com/search?hl=ja&q=%s")
	("ge" . "http://www.google.com/search?hl=en&q=%s")
	("m" . "http://maps.google.co.jp/maps?hl=ja&q=%s")
	("y" . "http://search.yahoo.co.jp/search?p=%s")
	("yt" . "http://www.youtube.com/results?search_type=&search_query=%s&aq=f")
	("tw" . "http://search.twitter.com/search?q=%s")
	("goo" . "http://dictionary.goo.ne.jp/srch/all/%s/m0u/")
	("a" . "http://www.answers.com/topic/%s")
	("ew" . "http://www.google.com/cse?cx=004774160799092323420%%3A6-ff2s0o6yi&q=%s&sa=Search")
	("eow" . "http://eow.alc.co.jp/%s/UTF-8/")
	("z" . "http://www.amazon.com/s/url=search-alias%%3Daps&field-keywords=%s")
	("zj" . "http://www.amazon.co.jp/gp/search?index=blended&field-keywords=%s")
	("y" . "http://search.yahoo.com/search?p=%s")
	("yj" . "http://search.yahoo.co.jp/search?p=%s")
	("we" . "http://www.wikipedia.org/search-redirect.php?search=%s&language=en")
	("wj" . "http://www.wikipedia.org/search-redirect.php?search=%s&language=ja"))
  "A list is search engines list. keys engines nick, and value is search engine query.
Search word %s. In formatting url-hexify. Use %% to put a single % into output.")

(defun search-web (engine word)
  (browse-url
   (format (cdr (assoc engine search-engines)) (url-hexify-string word))))

(defun search-web-at-point (engine)
  "search web search engine for word on cursor.
arg is search-engines keys."
  (interactive "sSearch engine: ")
  (search-web engine (substring-no-properties (thing-at-point 'word))))

(defun search-web-region (engine)
  (interactive "sSearch engine: ")
  (let ((beg (mark))
        (end (point)))
	(search-web engine (buffer-substring-no-properties beg end))))

;; (defun search-web-sc (start end)
;; (interactive "r")
;; (if mark-active
;;     (search-web-region :start start :end end)
;;   (search-web-at-point)))

(define-prefix-command 'search-web-map)
(global-set-key (kbd "C-q") 'search-web-map)
(global-set-key (kbd "C-q g") (lambda () (interactive) (search-web-at-point "g")))
(global-set-key (kbd "C-q r") (lambda () (interactive) (search-web-region "g")))
;(global-set-key (kbd "C-q g") (lambda () (interactive) (search-web-sc "g")))


;;----------------------------------------------------------------
;; python-mode
;;

;; (setq auto-mode-alist
;;       (cons '("\\.py$" . python-mode) auto-mode-alist))
;; (autoload 'python-mode "python-mode" "Python editing mode." t)

;; (require 'epc)
;; (require 'auto-complete-config)
;; (require 'python)

;; ;;;;; PYTHONPATH上のソースコードがauto-completeの補完対象になる ;;;;;
(setenv "PYTHONPATH" "/usr/local/lib/python2.7/site-packages")
(elpy-enable)
;; Configuring the backend
(setq elpy-rpc-backend "jedi")
;; (require 'jedi)
;; (add-hook 'python-mode-hook 'jedi:setup)
(define-key python-mode-map (kbd "<C-tab>") 'jedi:complete)
;; (setq jedi:complete-on-dot t)

;;----------------------------------------------------------------
;; quickrun
;;
(require 'quickrun)
(push '("*quickrun*") popwin:special-display-config)

;; region選択されていたら quickrun-region されていなかったら quickrun を実行する。
;; http://yunojy.github.io/blog/2013/03/17/emacs-de-quickrun-or-quickrun-region/
(defun quickrun-sc (start end)
(interactive "r")
(if mark-active
    (quickrun :start start :end end)
  (quickrun)))
(global-set-key (kbd "<f5>") 'quickrun-sc)


;;----------------------------------------------------------------
;; emmet-mode
;; http://catcher-in-the-tech.net/55/

(require 'emmet-mode)
(add-hook 'sgml-mode-hook 'emmet-mode)
(add-hook 'php-mode-hook 'emmet-mode)
(add-hook 'emmet-mode-hook (lambda () (setq emmet-indentation 2)))
(define-key emmet-mode-keymap (kbd "C-c C-j") 'emmet-expand-line)

;;----------------------------------------------------------------
;; Re-open read-only files as root automagically
;; https://tsdh.wordpress.com/2008/08/20/re-open-read-only-files-as-root-automagically/

(defun th-rename-tramp-buffer ()
  (when (file-remote-p (buffer-file-name))
    (rename-buffer
     (format "%s:%s"
             (file-remote-p (buffer-file-name) 'method)
             (buffer-name)))))

(add-hook 'find-file-hook
          'th-rename-tramp-buffer)

(defadvice find-file (around th-find-file activate)
  "Open FILENAME using tramp's sudo method if it's read-only."
  (if (and (not (file-writable-p (ad-get-arg 0)))
           (y-or-n-p (concat "File "
                             (ad-get-arg 0)
                             " is read-only.  Open it as root? ")))
      (th-find-file-sudo (ad-get-arg 0))
    ad-do-it))

(defun th-find-file-sudo (file)
  "Opens FILE with root privileges."
  (interactive "F")
  (set-buffer (find-file (concat "/sudo::" file))))

;;----------------------------------------------------------------
;; sql-index
(eval-after-load "sql"
  '(load-library "sql-indent"))
(setq sql-indent-offset 2)
